<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Island94.org</title>
    <description>A Lost and Found
</description>
    <link>https://island94.org/</link>
    <atom:link href="https://island94.org/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 04 May 2023 14:11:01 +0000</pubDate>
    <lastBuildDate>Thu, 04 May 2023 14:11:01 +0000</lastBuildDate>
    <generator>Jekyll v4.3.2</generator>
    
    
      
        




<item>
  <title>Whatever you do, don&apos;t autoload Rails `lib/`</title>
  <description>&lt;p&gt;One of the most common problems I encounter consulting on Rails projects is that developers have previously added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/&lt;/code&gt; to autoload paths and then twisted themselves into knots creating error-prone, project-specific conventions for subsequently un-autoloading a subset of files also in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Don’t do it. Don’t add your Rails project’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/&lt;/code&gt; to autoload paths.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;how-does-this-happen&quot;&gt;How does this happen?&lt;/h3&gt;

&lt;p&gt;A growing Rails application will accumulate a lot of ruby classes and files that don’t cleanly fit into the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/&lt;/code&gt; directories of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;controllers&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;helpers&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jobs&lt;/code&gt;, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;models&lt;/code&gt;. Developers should also be creating new directories in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/*&lt;/code&gt; to organize like-with-like files (your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/services/&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/merchants/&lt;/code&gt;, etc.). That’s ok!&lt;/p&gt;

&lt;p&gt;But frequently there are one-off classes that don’t seem to rise to the level of their own directory in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/&lt;/code&gt;. From looking through the cruft of projects like &lt;a href=&quot;https://github.com/mastodon/mastodon/tree/c62604b5f69c3ad7f5449e0a7dc26606adebb777/app/lib&quot;&gt;Mastadon&lt;/a&gt; or applications &lt;a href=&quot;https://github.com/codeforamerica/vita-min/tree/2f5faf06f586d1ea3915af262aab7683240f4727/app/lib&quot;&gt;I’ve&lt;/a&gt; &lt;a href=&quot;https://github.com/bensheldon/open311status/blob/2cd70e391770f64d734f462624222fb8f8bc14a4/app/lib/service_requests_pager.rb&quot;&gt;worked&lt;/a&gt; &lt;a href=&quot;https://github.com/bensheldon/open311status/tree/2cd70e391770f64d734f462624222fb8f8bc14a4/app/lib&quot;&gt;on&lt;/a&gt;, these files look like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A lone form builder&lt;/li&gt;
  &lt;li&gt;POROs (“Plain old Ruby objects”) like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PhoneNumberFormatter&lt;/code&gt;, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ZipCodes&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Seeder&lt;/code&gt;, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pagination&lt;/code&gt;. Objects that serve a single purpose and are largely singletons/identity objects within the application.&lt;/li&gt;
  &lt;li&gt;Boilerplate classes for 3rd party gems, e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ApplicationResponder&lt;/code&gt; for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;responders gem&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That these files accumulate in a project is a fact of life. When choosing where to put them, that’s when things can go wrong.&lt;/p&gt;

&lt;p&gt;In a newly built Rails project &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/&lt;/code&gt; looks like the natural place for these. But &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/&lt;/code&gt; has a downside: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/&lt;/code&gt; is not autoloaded. This can come as a surprise, even to experienced developers, because they have been accustomed to the convenience of autoloaded files in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/&lt;/code&gt;. It’s not difficult to add an explicit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;require&lt;/code&gt; statement into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application.rb&lt;/code&gt; or in an initializer, but that may not be one’s first thought.&lt;/p&gt;

&lt;p&gt;That’s when people jump to googling “how to autoload &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/&lt;/code&gt;”. Don’t do it! &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/&lt;/code&gt; should not be autoloaded.&lt;/p&gt;

&lt;p&gt;The problem with autoloading &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/&lt;/code&gt; is that there will subsequently be files added to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/&lt;/code&gt; that should &lt;em&gt;not&lt;/em&gt; be autoloaded; because they should only be provisionally loaded in a certain environment or context, or deferred, for behavioral, performance, or memory reasons. If your project has already enabled autoloading on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/&lt;/code&gt;, it’s now likely you’ll then add additional configuration to un-autoload the new files. These overrides and counter-overrides accumulate over time and become difficult to understand and unwind, and they cause breakage because someone’s intuition of what will or won’t be loaded in a certain environment or context is wrong.&lt;/p&gt;

&lt;p&gt;What should you do instead?&lt;/p&gt;

&lt;h3 id=&quot;an-omakase-solution&quot;&gt;An omakase solution&lt;/h3&gt;

&lt;p&gt;DHH &lt;a href=&quot;https://github.com/rails/rails/pull/47843#issuecomment-1515367267&quot;&gt;writes&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/&lt;/code&gt; is intended to be for non-app specific library code that just happens to live in the app for now (usually pending extraction into open source or whatever). Everything app specific that’s part of the domain model should live in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/models&lt;/code&gt; (that directory is for POROs as much as ARs)… Stuff like a generic PhoneNumberFormatter is exactly what &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/&lt;/code&gt; is intended for. And if it’s app specific, for some reason, then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/models&lt;/code&gt; is fine.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The omakase solution is to manually require files from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/&lt;/code&gt; or use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/models&lt;/code&gt; generically to mean “Domain Models” rather than solely Active Record models. That’s great! Do that.&lt;/p&gt;

&lt;h3 id=&quot;a-best-practice&quot;&gt;A best practice&lt;/h3&gt;

&lt;p&gt;Xavier Noria, Zeitwerk’s creator &lt;a href=&quot;https://github.com/rails/rails/issues/37835#issuecomment-757367812&quot;&gt;writes&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The best practice to accomplish that nowadays is to move that code to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/lib&lt;/code&gt;. Only the Ruby code you want to reload, tasks or other auxiliary files are OK in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sidekiq’s Problems and Troubleshooting &lt;a href=&quot;https://github.com/sidekiq/sidekiq/wiki/Problems-and-Troubleshooting#autoloading&quot;&gt;explains&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/&lt;/code&gt; directory will only cause pain. Move the code to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/lib/&lt;/code&gt; and make sure the code inside follows the class/filename conventions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The best practice is to create an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/lib/&lt;/code&gt; directory to home these files. &lt;a href=&quot;https://github.com/mastodon/mastodon/tree/c62604b5f69c3ad7f5449e0a7dc26606adebb777/app/lib&quot;&gt;Mastodon&lt;/a&gt; does it, as do &lt;a href=&quot;https://github.com/search?type=code&amp;amp;auto_enroll=true&amp;amp;q=path%3A%2F%5Eapp%5C%2Flib%5C%2F.*%5C.rb%2F&quot;&gt;many others&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This “best practice” is not without contention, as usually anything in Rails that deviates from omakase does, like RSpec instead of MiniTest or FactoryBot instead of Fixtures. But creating &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/lib&lt;/code&gt; as a convention for Rails apps works for me and many others.&lt;/p&gt;

&lt;h3 id=&quot;really-dont-autoload-lib&quot;&gt;Really, don’t autoload &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Whatever path you take, don’t take the path of autoloading &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/&lt;/code&gt;.&lt;/p&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/05/whatever-you-do-don-t-autoload-rails-lib&quot;&gt;Whatever you do, don&apos;t autoload Rails `lib/`&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Tue, 02 May 2023 14:09:00 +0000</pubDate>
  <link>https://island94.org/2023/05/whatever-you-do-don-t-autoload-rails-lib</link>
  <guid isPermaLink="true">https://island94.org/2023/05/whatever-you-do-don-t-autoload-rails-lib</guid>
  
  
</item>

      
    
      
        






<item>
  <title>I read &quot;The Constant Rabbit&quot; by Jasper Fforde</title>
  <description>&lt;p&gt;An “Event” has caused rabbits to become anthropomophic. This exchange is the book in a walnut-shell:&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;So while we ate the excellent walnut cake that the Venerable Bunty’s mother’s sister’s daughter’s husband’s son had baked, Venerable Bunty and Connie told us about life inside the colonies, which despite the lack of freedom and limited space were the only areas within the United Kingdom that ran themselves entirely on rabbit socio-egalitarian principles.&lt;/p&gt;

  &lt;p&gt;‘It’s occasionally aggressive and often uncompromising,’ said Finkle, ‘but from what I’ve seen of both systems, a country run on rabbit principles would be a step forward – although to be honest, I’m not sure we’d be neurologically suited to the regime. While most humans are wired to be reasonably decent, a few are wired to be utter shits – and they do tend to tip the balance.’&lt;/p&gt;

  &lt;p&gt;‘The decent humans are generally supportive of doing the right thing,’ said the Venerable Bunty, ‘but never take it much farther than that. You’re trashing the ecosystem for no reason other than a deluded sense of anthropocentric manifest destiny, and until you stop talking around the issue and actually feel some genuine guilt, there’ll be no change.’&lt;/p&gt;

  &lt;p&gt;‘Shame, for want of a better word, is good,’ said Finkle. ‘Shame is right, shame works. Shame is the gateway emotion to increased self-criticism, which leads to realisation, an apology, outrage and eventually meaningful action. We’re not holding our breaths that any appreciable numbers can be arsed to make the journey along that difficult chain of emotional honesty – many good people get past realisation, only to then get horribly stuck at apology – but we live in hope.’&lt;/p&gt;

  &lt;p&gt;‘I understand,’ I said, having felt that I too had yet to make the jump to apology.&lt;/p&gt;

  &lt;p&gt;‘It’s further evidence of satire being the engine of the Event,’ said Connie, ‘although if that’s true, we’re not sure for whose benefit.’&lt;/p&gt;

  &lt;p&gt;‘Certainly not humans’,’ said Finkle, ‘since satire is meant to highlight faults in a humorous way to achieve betterment, and if anything, the presence of rabbits has actually made humans worse.’&lt;/p&gt;

  &lt;p&gt;‘Maybe it’s the default position of humans when they feel threatened,’ I ventured, ‘although if I’m honest, I know a lot of people who claim to have “nothing against rabbits” but tacitly do nothing against the overt leporiphobia that surrounds them.’&lt;/p&gt;

  &lt;p&gt;‘Or maybe it’s just satire for comedy’s sake and nothing else,’ added Connie, ‘or even more useless, satire that provokes a few guffaws but only low to middling outrage – but is coupled with more talk and no action. A sort of  . . . empty cleverness.’&lt;/p&gt;

  &lt;p&gt;‘Maybe a small puff in the right moral direction is the best that could be hoped for,’ added Finkle thoughtfully. ‘Perhaps that’s what satire does – not change things wholesale but nudge the collective consciousness in a direction that favours justice and equality. Is there any more walnut cake?’&lt;/p&gt;

  &lt;p&gt;‘I’m afraid I had the last slice,’ I said, ‘but I did ask if anyone else wanted it.’&lt;/p&gt;

&lt;/blockquote&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This book review for &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/04/the-constant-rabbit&quot;&gt;The Constant Rabbit&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Sun, 30 Apr 2023 03:29:00 +0000</pubDate>
  <link>https://island94.org/2023/04/the-constant-rabbit</link>
  <guid isPermaLink="true">https://island94.org/2023/04/the-constant-rabbit</guid>
</item>

      
    
      
        






<item>
  <title>I read &quot;The Dawn of Everything&quot; by David Graeber and David Wengrow</title>
  <description>&lt;blockquote&gt;

  &lt;p&gt;If there is a particular story we should be telling, a big question we should be asking of human history (instead of the ‘origins of social inequality’), is it precisely this: how did we find ourselves stuck in just one form of social reality, and how did relations based ultimately on violence and domination come to be normalized within it?&lt;/p&gt;

  &lt;p&gt;…&lt;/p&gt;

  &lt;p&gt;What happens if we treat the rejection of urban life, or of slavery, [or of certain technologies] in certain times and places as something just as significant as the emergence of those same phenomena in others.&lt;/p&gt;

  &lt;p&gt;…&lt;/p&gt;

  &lt;p&gt;What is the purpose of all this new knowledge, if not to reshape our conceptions of who we are and what we might yet become? If not, in other words, to rediscover the meaning of our third basic freedom: the freedom to create new and different forms of social reality?&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;I imagine I’m already on board with David Graeber’s political project, so while I greatly enjoyed it, I found it too long by about a third.&lt;/p&gt;

&lt;p&gt;The overall thrust is that people are much more interesting and creative than we give them credit for, and there’s a lot (too much for me in this book) of historical evidence that this is the case. And that it’s bunk to claim that increasing social complexity and scale requires an authoritarian state or bureacracy. I guess it’s an argument to unstick the “End of History”-framing we’re mired in.&lt;/p&gt;

&lt;p&gt;Of various things I learned / was confronted with:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Indulging children is Native American practice. Makes sense cause it’s a common theme in Kim Stanley Robinson books of which the Haudenosaunee make frequent appearance too.&lt;/li&gt;
  &lt;li&gt;Roman-style property ownership (of which we inherit), is pretty fucked up when stared directly at, based on a patriarch’s relations with household slaves.&lt;/li&gt;
  &lt;li&gt;It seems like a pretty legit critique of Western society to point out that there are a lot of &lt;em&gt;legitimate&lt;/em&gt; ways poeple are free to harm other people during their every day life, and that’s got to be pretty warpy.&lt;/li&gt;
  &lt;li&gt;Spending more time imagining and debating the society and politics you want to live in… probably makes for a better society and politics. One of those, if it’s hard do it a lot sorts of things. And if that sounds annoying in the context of the present, that’s probably because we’ve severely narrowed the scope of debate and possibility.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There’s a lot of history and anthropology to boil down:&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;…the key point to remember is that we are not talking here about ‘freedom’ as an abstract ideal or formal principle (as in ‘Liberty, Equality and Fraternity!’). Over the course of these chapters we have instead talked about basic forms of social liberty which one might actually put into practice:&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;the freedom to move away or relocate from one’s surroundings;&lt;/li&gt;
    &lt;li&gt;the freedom to ignore or disobey commands issued by others; and&lt;/li&gt;
    &lt;li&gt;the freedom to shape entirely new social realities, or shift back and forth between different ones&lt;/li&gt;
  &lt;/ol&gt;

  &lt;p&gt;….three elementary principles of domination:&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;control of violence (or sovereignty),&lt;/li&gt;
    &lt;li&gt;control of knowledge, and&lt;/li&gt;
    &lt;li&gt;charismatic politics&lt;/li&gt;
  &lt;/ol&gt;

&lt;/blockquote&gt;

&lt;p&gt;…and a lot of historical and anthropoligical critique:&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;Environmental determinists have an unfortunate tendency to treat humans as little more than automata, living out some economist’s fantasy of rational calculation. To be fair, they don’t deny that human beings are quirky and imaginative creatures – they just seem to reason that, in the long run, this fact makes very little difference.&lt;/p&gt;

  &lt;p&gt;…&lt;/p&gt;

  &lt;p&gt;For much of the twentieth century, anthropologists tended to describe the societies they studied in ahistorical terms, as living in a kind of eternal present. Some of this was an effect of the colonial situation under which much ethnographic research was carried out. The British Empire, for instance, maintained a system of indirect rule in various parts of Africa, India and the Middle East where local institutions like royal courts, earth shrines, associations of clan elders, men’s houses and the like were maintained in place, indeed fixed by legislation. Major political change – forming a political party, say, or leading a prophetic movement – was in turn entirely illegal, and anyone who tried to do such things was likely to be put in prison. This obviously made it easier to describe the people anthropologists studied as having a way of life that was timeless and unchanging.&lt;/p&gt;

  &lt;p&gt;….&lt;/p&gt;

  &lt;p&gt;Social science has been largely a study of the ways in which human beings are not free: the way that our actions and understandings might be said to be determined by forces outside our control. Any account which appears to show human beings collectively shaping their own destiny, or even expressing freedom for its own sake, will likely be written off as illusory, awaiting ‘real’ scientific explanation; or if none is forthcoming (why do people dance?), as outside the scope of social theory entirely. This is one reason why most ‘big histories’ place such a strong focus on technology. Dividing up the human past according to the primary material from which tools and weapons were made (Stone Age, Bronze Age, Iron Age) or else describing it as a series of revolutionary breakthroughs (Agricultural Revolution, Urban Revolution, Industrial Revolution), they then assume that the technologies themselves largely determine the shape that human societies will take for centuries to come – or at least until the next abrupt and unexpected breakthrough comes along to change everything again.&lt;/p&gt;

  &lt;p&gt;…&lt;/p&gt;

  &lt;p&gt;Choosing to describe history the other way round, as a series of abrupt technological revolutions, each followed by long periods when we were prisoners of our own creations, has consequences. Ultimately it is a way of representing our species as decidedly less thoughtful, less creative, less free than we actually turn out to have been. It means not describing history as a continual series of new ideas and innovations, technical or otherwise, during which different communities made collective decisions about which technologies they saw fit to apply to everyday purposes, and which to keep confined to the domain of experimentation or ritual play. What is true of technological creativity is, of course, even more true of social creativity. One of the most striking patterns we discovered while researching this book – indeed, one of the patterns that felt most like a genuine breakthrough to us – was how, time and again in human history, that zone of ritual play has also acted as a site of social experimentation – even, in some ways, as an encyclopaedia of social possibilities.&lt;/p&gt;

&lt;/blockquote&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This book review for &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/04/the-dawn-of-everything&quot;&gt;The Dawn of Everything&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Sun, 30 Apr 2023 02:56:00 +0000</pubDate>
  <link>https://island94.org/2023/04/the-dawn-of-everything</link>
  <guid isPermaLink="true">https://island94.org/2023/04/the-dawn-of-everything</guid>
</item>

      
    
      
        




<item>
  <title>How GoodJob&apos;s mountable Rails Engine delivers Javascript importmaps and frontend assets</title>
  <description>&lt;p&gt;&lt;a href=&quot;https://github.com/bensheldon/good_job&quot;&gt;GoodJob&lt;/a&gt; is a multithreaded, Postgres-based ActiveJob backend for Ruby on Rails.&lt;/p&gt;

&lt;p&gt;GoodJob includes a full-featured (though optional) web dashboard to monitor and administer background jobs. The web dashboard is included in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;good_job&lt;/code&gt; gem as a mountable Rails Engine.&lt;/p&gt;

&lt;p&gt;As the maintainer of GoodJob, I want to make gem development easier for myself by innovating as little as possible. That’s why GoodJob builds on top of Active Record and Concurrent::Ruby.&lt;/p&gt;

&lt;p&gt;But, the frontend can be a beast. When thinking about how to build a full-featured web dashboard &lt;em&gt;packaged within a Rails Engine within a gem&lt;/em&gt;, I had three goals:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Be asset pipeline agnostic with zero dependencies.&lt;/strong&gt; As of Rails ~7.0, a Rails developer can choose between several different asset pipeline tools (Sprockets, Webpacker/Shakapacker, esbuild/jsbundling, etc.). That’s too many! I want to ensure what I package with GoodJob is compatible with all of them. I also don’t want to affect the parent application at all; everything must be independent and self-contained.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Allow easy patching/debugging.&lt;/strong&gt; I want the GoodJob web dashboard to work when using the Git repo directly in a project’s Gemfile or simply &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle open good_job&lt;/code&gt; to debug a problem.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Write contemporary frontend code.&lt;/strong&gt; I want to use Bootstrap UI, Stimulus, Rails UJS, and write modular JavaScript with imports. Maybe even Turbo!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And of course, I want GoodJob to be secure, performant, and a joy to develop and use for myself and the developer community.&lt;/p&gt;

&lt;p&gt;Read on for how I achieved it all (mostly!) with GoodJob.&lt;/p&gt;

&lt;h2 id=&quot;what-i-didnt-do&quot;&gt;What I didn’t do&lt;/h2&gt;

&lt;p&gt;Here’s all the things I considered, but decided not to do:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Nope: Manually construct/inline a small number of javascript files&lt;/strong&gt;: I did not want to manually build a javascript file, copy-pasting various various 3rd-party libraries into a single file, and then writing my code at the bottom. This seemed laborious and prone to error, especially when I would need to update a library; and my IDE doesn’t work well with large files so writing my own code would be difficult.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Nope: Precompile javascript in the repository or on gem build:&lt;/strong&gt; I did not want to force a pre-commit step to build javascript, or to only package built javascript into the gem because that would make patching and debugging difficult. Over my career I’ve struggled contributing to a number of otherwise fantastic gems that use this workflow pattern.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Nope: Compile javascript in the application:&lt;/strong&gt; Rails has too many different asset pipeline patterns right now for me to consider supporting them all. I consider this more a result of a highly fragmented frontend ecosystem than an indictment of Rails. I can’t imagine supporting all of the different options and whatever else shows up in the future at the same time. (I’m in awe of the gems that do; nice work &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rails_admin&lt;/code&gt;!)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-i-did-do&quot;&gt;What I did do&lt;/h2&gt;

&lt;p&gt;As I wrote earlier: “innovate as little as possible”:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Serve vanilla JS and CSS out of vanilla Routes/Controller&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GoodJob has explicit routes for frontend assets that wire up to a controller that serves those assets statically with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;render :file&lt;/code&gt;. Let’s break that down…&lt;/p&gt;

&lt;p&gt;In my Rails Engine’s router, I define a namescape, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;frontend&lt;/code&gt;, and two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get&lt;/code&gt; routes. The first route, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;modules&lt;/code&gt; , is for Javascript modules that will go into the importmap. The second route, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;static&lt;/code&gt; , is for Javascript and CSS that I’ll link/script directly in the HTML head.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# config/routes.rb&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:frontend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;controller: :frontends&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;modules/:name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;action: :module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;as: :frontend_module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;constraints: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;format: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;js&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;static/:name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;action: :static&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;as: :frontend_static&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;constraints: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;format: &lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%w[css js]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the matching controller, I create static constants that define hashes of files that are matched and served, which I store in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/frontend&lt;/code&gt; directory in my Rails Engine. &lt;em&gt;I want paths to be explicit for security reasons because passing any sort of dynamic file path through the URL could be a path traversal vulnerability.&lt;/em&gt; All of the frontend assets are stored in  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/frontend&lt;/code&gt; and served out of this controller:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# app/controllers/good_job/frontends_controller.rb&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;GoodJob&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FrontendsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActionController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# rubocop:disable Rails/ApplicationController&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;STATIC_ASSETS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;css: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;bootstrap: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GoodJob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;frontend&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;good_job&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;vendor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bootstrap&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bootstrap.min.css&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;style: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GoodJob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;frontend&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;good_job&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;style.css&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;js: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;bootstrap: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GoodJob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;frontend&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;good_job&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;vendor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bootstrap&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bootstrap.bundle.min.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;chartjs: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GoodJob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;frontend&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;good_job&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;vendor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;chartjs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;chart.min.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;es_module_shims: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GoodJob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;frontend&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;good_job&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;vendor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;es_module_shims.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;rails_ujs: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GoodJob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;frontend&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;good_job&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;vendor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rails_ujs.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;freeze&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;# Additional JS modules that don&apos;t live in app/frontend/good_job/modules&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;MODULE_OVERRIDES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;application: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GoodJob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;frontend&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;good_job&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;application.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;stimulus: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GoodJob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;frontend&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;good_job&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;vendor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;stimulus.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;freeze&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;js_modules&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@_js_modules&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GoodJob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;frontend&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;good_job&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;modules&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:file?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each_with_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({})&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modules&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;basename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;basename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sym&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;modules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MODULE_OVERRIDES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Necessarly to serve Javascript to the browser&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;skip_after_action&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:verify_same_origin_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;raise: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;before_action&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expires_in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;public: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;static&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;file: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;STATIC_ASSETS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ActionController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RoutingError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Not Found&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;module&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ActionController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RoutingError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Not Found&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;js&quot;&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;file: &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;js_modules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ActionController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RoutingError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Not Found&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One downside of this is that I’m unable to use Sass or Typescript or anything that isn’t vanilla CSS or Javascript. So far I haven’t missed that too much; Bootstrap brings a very comprehensive design system and Rubymine is pretty good at hinting Javscript on its own.&lt;/p&gt;

&lt;p&gt;Another downside is that I package several hundred kilobytes of frontend code within my gem. This increases the gem size, which is a real bummer if an application isn’t mounting the dashboard. I’ve considered separating the optional dashboard into a separate gem, but I’m deferring that until anyone notices that it’s problematic (so far so good!).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Manually link assets and construct a JS importmaps in my Engine’s layout &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Having created the routes and controller actions, I can simply link the static files in the layout html header:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- app/views/layouts/good_job/application.html.erg --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Note:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Do&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;asset&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;helpers&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;avoid&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;paths&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;being&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;overriden&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;config.asset_host&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tag.link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stylesheet&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;frontend_static_path&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;:bootstrap&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;format:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:css&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;GoodJob::VERSION&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;locale:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nonce:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content_security_policy_nonce&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tag.link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stylesheet&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;frontend_static_path&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;:style&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;format:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:css&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;GoodJob::VERSION&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;locale:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nonce:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content_security_policy_nonce&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tag.script&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&quot;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;frontend_static_path&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;:bootstrap&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;format:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:js&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;GoodJob::VERSION&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;locale:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nonce:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content_security_policy_nonce&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tag.script&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&quot;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;frontend_static_path&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;:chartjs&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;format:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:js&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;GoodJob::VERSION&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;locale:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nonce:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content_security_policy_nonce&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tag.script&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&quot;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;frontend_static_path&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;:rails_ujs&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;format:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:js&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;GoodJob::VERSION&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;locale:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nonce:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content_security_policy_nonce&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Beneath this, I manually construct the JSON the browser expects for importmaps:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Link es_module_shims --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tag.script&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&quot;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;frontend_static_path&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;:es_module_shims&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;format:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:js&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;GoodJob::VERSION&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;locale:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;async:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nonce:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content_security_policy_nonce&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Construct the importmaps JSON object --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;importmaps = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;GoodJob::FrontendsController.js_modules.keys.index_with&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;module_name&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;frontend_module_path&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;module_name&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;format:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:js&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;locale:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;GoodJob::VERSION&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tag.script&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;imports:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;importmaps&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;to_json.html_safe&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;importmap&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nonce:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content_security_policy_nonce&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Import the entrypoint: application.js --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tag.script&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&quot;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nonce:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content_security_policy_nonce&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; import &quot;application&quot;; &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;thats-it&quot;&gt;That’s it!&lt;/h3&gt;

&lt;p&gt;I’ll admit, serving frontend assets using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;render file:&lt;/code&gt; is boring, but I experienced a thrill the first time I wired up the importmaps and &lt;em&gt;it just worked&lt;/em&gt;. Writing small Javascript modules and using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import&lt;/code&gt; directives is really nice. I recently added Stimulus and I’m feeling optimistic that I could reliably implement Turbo in my gem’s Rails Engine fully decoupled from the parent application.&lt;/p&gt;

&lt;p&gt;I hope this post about GoodJob inspires you to build full-featured web frontends for your own gems and libraries.&lt;/p&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/03/how-goodjob-s-mountable-rails-engine-delivers-javascript-importmaps-and-frontend-assets&quot;&gt;How GoodJob&apos;s mountable Rails Engine delivers Javascript importmaps and frontend assets&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Mon, 20 Mar 2023 15:27:00 +0000</pubDate>
  <link>https://island94.org/2023/03/how-goodjob-s-mountable-rails-engine-delivers-javascript-importmaps-and-frontend-assets</link>
  <guid isPermaLink="true">https://island94.org/2023/03/how-goodjob-s-mountable-rails-engine-delivers-javascript-importmaps-and-frontend-assets</guid>
  
    <category>GoodJob</category>
  
  
</item>

      
    
      
        




<item>
  <title>Recently, March 12, 2023</title>
  <description>&lt;ul&gt;
  &lt;li&gt;Work has been complicated, recently. &lt;a href=&quot;https://techcrunch.com/2023/02/09/github-lays-off-10-and-goes-fully-remote/&quot;&gt;Layoffs, as a general idea&lt;/a&gt;, were announced a month ago; it was the same week I came down with a bad cold. I’ve been fairly low energy since and have had trouble differentiating the two. I’m supremely proud and confident that my team is doing the most important work possible. We’ll see!&lt;/li&gt;
  &lt;li&gt;The week prior to all of this, my dad came to visit and stay with us. Having an easier time hosting family was one of our goals in getting a 2nd bedroom. Success.&lt;/li&gt;
  &lt;li&gt;Wow, it’s nearly been a year since I left my last job. I’ve had a number of former colleagues asking for help in leaving, in addition to talking with folks being pushed out: I was surprised to see Code for America finally kill Brigades, and really &lt;a href=&quot;https://statescoop.com/code-for-america-local-brigades-ending/&quot;&gt;twist the knife too&lt;/a&gt; by forcing groups to rename themselves.&lt;/li&gt;
  &lt;li&gt;GoodJob is great! I’ve been thinking about &lt;a href=&quot;https://github.com/bensheldon/good_job/discussions/831&quot;&gt;replacing Advisory Locks&lt;/a&gt; with a lock strategy that’s more compatible with PgBouncer. But that will probably be a 2-year project at least of incrementally crabwalking towards that goal while avoiding breaking changes. &lt;a href=&quot;https://github.com/rubygems/rubygems.org/pull/3533&quot;&gt;Rubygems.org just adopted GoodJob&lt;/a&gt;; I am humbled.&lt;/li&gt;
  &lt;li&gt;On other projects, I’ve been trying to lower costs. My S3 data-transfer bill went from $10 to $50 a month, which I’m not happy about; scrapers are the worst 🤷‍♀️ I’ve also been experimenting with Dokku for packing some smaller projects (paying $15 once rather than $12 per app), though the VM locked up once on a Saturday night and I had to reboot it and this is exactly why I don’t want to manage my own servers.&lt;/li&gt;
  &lt;li&gt;My brother and I have been planning a Celebration of Life for my mom.&lt;/li&gt;
  &lt;li&gt;I’m so happy to finally be back on Daylight Savings Time.&lt;/li&gt;
&lt;/ul&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/03/recently-march-12-2023&quot;&gt;Recently, March 12, 2023&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Mon, 13 Mar 2023 00:26:00 +0000</pubDate>
  <link>https://island94.org/2023/03/recently-march-12-2023</link>
  <guid isPermaLink="true">https://island94.org/2023/03/recently-march-12-2023</guid>
  
    <category>weeknotes</category>
  
  
</item>

      
    
      
        




<item>
  <title>Service Object Objects in Ruby</title>
  <description>&lt;p&gt;For anyone that follows me on social media, I’ll sometimes get into a &lt;a href=&quot;https://deprogrammaticaipsum.com/james-coplien/&quot;&gt;Coplien&lt;/a&gt;-esque funk of “I don’t wanna write Classes. I want to write &lt;em&gt;Objects&lt;/em&gt;!”. I don’t want to negotiate an industrial-relations policy for instances of Person in the current scope. I want to imagine the joy and misery Alice and Bob will experience working together right now.&lt;/p&gt;

&lt;p&gt;I was thinking of that recently when &lt;a href=&quot;https://www.reddit.com/r/ruby/comments/10sooyr/comment/j74j5qw/?utm_source=reddit&amp;amp;utm_medium=web2x&amp;amp;context=3&quot;&gt;commenting on Reddit&lt;/a&gt; about Caleb Hearth’s &lt;a href=&quot;https://calebhearth.com/decree&quot;&gt;“The Decree Design Pattern”&lt;/a&gt;. Which ended up in the superset of these two thoughts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;heck yeah! if it’s globally distinct it should be globally referenceable&lt;/li&gt;
  &lt;li&gt;oh, oh no, I don’t like looking at &lt;em&gt;that&lt;/em&gt; particular Ruby code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This was my comment to try to personally come to terms with those thoughts, iteratively:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# a consistent callable&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;my_decree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_something&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# ok, but globally scoped&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;MY_DECREE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_something&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# ok, but without the shouty all-caps&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MyDecree&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;do_something&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# ok, but what about when it gets really complex&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyDecree&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@variable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;variable&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;do_something&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;do_something_else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;do_even_more&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_even_more&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# something really complicated....&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From the outside, &lt;em&gt;object&lt;/em&gt; perspective, these are all have the same interchangeable interface (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.call&lt;/code&gt;), and except for the first one, accessible everywhere. That’s great, from my perspective! Though I guess it’s a pretty short blog post to say:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Decrees are globally discrete and call-able objects&lt;/li&gt;
  &lt;li&gt;The implementation is up to you!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unfortunately, the moment the internals come into play, it gets messy. But I don’t think that should take away from the external perspective.&lt;/p&gt;


  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/02/service-object-objects-in-ruby&quot;&gt;Service Object Objects in Ruby&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Tue, 14 Feb 2023 16:18:00 +0000</pubDate>
  <link>https://island94.org/2023/02/service-object-objects-in-ruby</link>
  <guid isPermaLink="true">https://island94.org/2023/02/service-object-objects-in-ruby</guid>
  
    <category>Ruby</category>
  
  
</item>

      
    
      
        




<item>
  <title>Slop and call</title>
  <description>&lt;p&gt;In my role as Engineering Manager, I frequently play &lt;em&gt;Keeper of the Process&lt;/em&gt;. Having worked effectively alongside plenty of agile &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#noplanning&lt;/code&gt; people (RIP Andrew), and carrying the scars of dysfunctional processes (oh, PRDs and OGSM), it feels historically out of character to lean into OKR scores and target dates. And I think I’ve made my peace with it.&lt;/p&gt;

&lt;p&gt;When I was in high school, my friend’s dad Gary (RIP Gary) retired and bought a championship pool table. The pool table went in their living room and everything else came out. Nothing else fit. The room was a pool table and a stero, which Gary kept tuned to classic jazz. We played a lot of pool and listened to a lot of Charles Mingus.&lt;/p&gt;

&lt;p&gt;The two games I remember playing most was 2-ball “English” and 9-ball. English is a “called” game; you have to say which ball and hole you’re aiming for before making the shot. 9-ball is played “slop”, as long as you hit the lowest-numbered ball first, it doesn’t matter which ball goes into which hole.&lt;/p&gt;

&lt;p&gt;Both games have their techniques. Playing English I got really good at fine ball handling and putting a sidespin on the ball (that’s the “English”) and having a narrow intent. With 9-ball, I learned to do a lot of what we call a “textbook”-shot (I dunno why we gave only this one shot that name; we were 17). The shot was to bounce the ball off of as many alternating rails as possible until the ball eventually walked itself into a pocket. Just slam it really.&lt;/p&gt;

&lt;p&gt;The point is, both of them were ok ways to play. They were just different. It’s fine.&lt;/p&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/02/slop-and-call&quot;&gt;Slop and call&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Mon, 13 Feb 2023 04:34:00 +0000</pubDate>
  <link>https://island94.org/2023/02/slop-and-call</link>
  <guid isPermaLink="true">https://island94.org/2023/02/slop-and-call</guid>
  
  
</item>

      
    
      
        




<item>
  <title>Prevent CDN poisoning from Fat GET/HEAD Requests in Ruby on Rails</title>
  <description>&lt;p&gt;There are many different flavors of &lt;a href=&quot;https://portswigger.net/research/web-cache-entanglement&quot;&gt;web cache poisoning discovered by Security Researcher James Kettle&lt;/a&gt;. Read on for an explanation of one I’ve run across…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is a Fat GET/HEAD Request?&lt;/strong&gt; A GET or HEAD request is “fat” when it has a request body. It’s unexpected! Typically one sees a request body with a POST or PUT request because the body contains form data. The HTTP specification says that including a request body with GET or HEAD requests is &lt;a href=&quot;https://stackoverflow.com/a/983458&quot;&gt;&lt;em&gt;undefined&lt;/em&gt;&lt;/a&gt;. You can do it, and it’s up to the application to figure out what that means. Sometimes it’s bad!&lt;/p&gt;

&lt;p&gt;You can get a sense of the applications that intentionally support Fat Requests (and how grumpy it makes some people) by reading through this &lt;a href=&quot;https://github.com/postmanlabs/postman-app-support/issues/131&quot;&gt;Postman issue&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fat Requests can lead to CDN and cache poisoning in Rails.&lt;/strong&gt; CDNs and caching web proxies (like Varnish) are frequently configured to cache the response from a GET or HEAD request based solely on the request’s URL and not the contents of the request body (they don’t cache POSTs or PUTs at all). If an application isn’t deliberately handling the request body, it may cause unexpected content to be cached and served.&lt;/p&gt;

&lt;p&gt;For example, you have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/search&lt;/code&gt; endpoint:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET /search&lt;/code&gt; shows a landing page with some explanatory content&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET /search?q=foo&lt;/code&gt; shows the search results for “foo”.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Here’s what a Fat Request looks like:&lt;/p&gt;

    &lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /search     &amp;lt;== the url for the landing page

q=verybadstuff  &amp;lt;== oh, but with a request body
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In a Rails Controller, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parameters&lt;/code&gt; (alias &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;params&lt;/code&gt;) merges query parameters (that’s the URL values) with request parameters (that’s the body values) into a single data structure. If your controller uses the presence of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;params[:q]&lt;/code&gt; to determine whether to show the landing page or the search results, it’s possible that when someone sends that Fat Request, your CDN may cache and subsequently serve the results for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;verybadstuff&lt;/code&gt; every time someone visits the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/search&lt;/code&gt; landing page. That’s bad!&lt;/p&gt;

&lt;p&gt;Here’s how to Curl it:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-XGET&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Content-Type: application/x-www-form-urlencoded&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;q=verybadstuff&quot;&lt;/span&gt; http://localhost:3000/search
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here are 3 ways to fix it…&lt;/p&gt;

&lt;h2 id=&quot;solution-1-fix-at-the-cdn&quot;&gt;Solution #1: Fix at the CDN&lt;/h2&gt;

&lt;p&gt;The most straightforward place to fix this should be at the caching layer, but it’s not always easy.&lt;/p&gt;

&lt;p&gt;With Cloudflare, you could rewrite the GET request’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt; header if it is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application/x-www-form-urlencoded&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;multipart/form-data&lt;/code&gt;. Or use a Cloudflare Worker to drop the request body.&lt;/p&gt;

&lt;p&gt;Varnish makes it easy to drop the request body for any GET request.&lt;/p&gt;

&lt;p&gt;Other CDNs or proxies may be easier or more difficult. It depends!&lt;/p&gt;

&lt;p&gt;Update via &lt;a href=&quot;https://github.com/Mr0grog&quot;&gt;Mr0grog&lt;/a&gt;: AWS Cloudfront returns a &lt;a href=&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/RequestAndResponseBehaviorCustomOrigin.html#RequestCustom-get-body&quot;&gt;403 by default&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;solution-2-deliberately-use-query_parameters&quot;&gt;Solution #2: Deliberately use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;query_parameters&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Rails provides three different methods for accessing parameters:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;query_parameters&lt;/code&gt; for the values in the request URL&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;request_parameters&lt;/code&gt; ) for the values in the request body&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parameters&lt;/code&gt; (alias &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;params&lt;/code&gt;) for the problematic combination of them both. Values in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;query_parameters&lt;/code&gt; take precedence over values in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;request_parameters&lt;/code&gt; when they are merged together.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Developers could be diligent and make sure to only use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;query_parameters&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#index&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#show&lt;/code&gt; , or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get&lt;/code&gt; routed actions. Here’s an example from the &lt;a href=&quot;https://github.com/git/git-scm.com/issues/1551&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git-scm&lt;/code&gt; project&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;solution-3-patch-rails&quot;&gt;Solution #3: Patch Rails&lt;/h2&gt;

&lt;p&gt;Changes were &lt;a href=&quot;https://github.com/rails/rails/issues/39974&quot;&gt;proposed in Rails&lt;/a&gt; to not have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parameters&lt;/code&gt; merge in the body values for GET and HEAD requests; it was rejected because it’s more a problem with the upstream cache than it is with Rails.&lt;/p&gt;

&lt;p&gt;You can patch your own version of Rails. Here’s an example that patches the method in &lt;a href=&quot;https://github.com/rails/rails/blob/21a3b52ba0b7d94b4903e02b6ac537a7d1d1c817/actionpack/lib/action_dispatch/http/parameters.rb#L49-L63&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActionDispatch::Request&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# config/initializers/sanitize_fat_requests.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SanitizeFatRequests&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parameters&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;action_dispatch.request.parameters&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head?&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query_parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dup&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;merge!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path_parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;set_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;action_dispatch.request.parameters&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:params&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:parameters&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;ActionDispatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SanitizeFatRequests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Some RSpec tests to verify this&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;rails_helper&apos;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SanitizeFatRequests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;type: :request&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;does not merge body params in GET requests&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/search&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;headers: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;CONTENT_TYPE&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;application/x-www-form-urlencoded&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;env: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;rack.input&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;StringIO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;q=verybadstuff&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# verify that the request is correctly shaped because&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# the test helpers don&apos;t expect this kind of request&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;request_parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;q&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;verybadstuff&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;action&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;panlexicon&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;controller&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;search&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# the behavioral expectation&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;not_to&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;verybadstuff&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;


  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/02/prevent-cdn-poisoning-from-fat-get-head-requests-in-ruby-on-rails&quot;&gt;Prevent CDN poisoning from Fat GET/HEAD Requests in Ruby on Rails&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Sun, 12 Feb 2023 20:32:00 +0000</pubDate>
  <link>https://island94.org/2023/02/prevent-cdn-poisoning-from-fat-get-head-requests-in-ruby-on-rails</link>
  <guid isPermaLink="true">https://island94.org/2023/02/prevent-cdn-poisoning-from-fat-get-head-requests-in-ruby-on-rails</guid>
  
    <category>rails</category>
  
  
</item>

      
    
      
        




<item>
  <title>Introducing GoodJob Bulk and Batch</title>
  <description>&lt;p&gt;GoodJob is a multithreaded, Postgres-based, ActiveJob backend for Ruby on Rails. I recently released two new features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GoodJob::Bulk&lt;/code&gt; to optimize enqueuing large numbers of jobs (released in GoodJob v3.9)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GoodJob::Batch&lt;/code&gt; to coordinate parallelized sets of jobs (released in GoodJob v3.10)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Big thanks to @julik, @mollerhoj, @v2kovac, @danielwestendorf, @jrochkind, @mperham and others for your help and counsel!&lt;/p&gt;

&lt;h3 id=&quot;bulk-enqueue&quot;&gt;Bulk enqueue&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bensheldon/good_job#bulk-enqueue&quot;&gt;GoodJob’s Bulk-enqueue functionality&lt;/a&gt; can buffer and enqueue multiple jobs at once, using a single INSERT statement. This can be more performant when enqueuing a large number of jobs.&lt;/p&gt;

&lt;p&gt;I was inspired by a discussion within a Rails pull request to implement &lt;a href=&quot;https://github.com/rails/rails/pull/46603&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;perform_all_later&lt;/code&gt; within Active Job&lt;/a&gt;. I wanted to both support the way most people enqueue Active Job jobs with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;perform_later&lt;/code&gt; and also &lt;a href=&quot;https://github.com/rails/rails/pull/43434&quot;&gt;encourage people to work directly with Active Job instances too&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# perform_later within a block&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;active_jobs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GoodJob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Bulk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enqueue&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;MyJob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform_later&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;AnotherJob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform_later&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# or with Active Job instances&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;active_jobs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MyJob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AnotherJob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;GoodJob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Bulk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;active_jobs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Releasing Bulk functionality was a two-step: I initially implemented it while working on Batch functionality, and then with @julik’s initiative and help, we extracted and polished it to be used on its own.&lt;/p&gt;

&lt;h3 id=&quot;batches&quot;&gt;Batches&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bensheldon/good_job#batches&quot;&gt;GoodJob’s Batch functionality&lt;/a&gt; coordinates parallelized sets of jobs. The ability to coordinate a set of jobs, and run callbacks during lifecycle events, has been a highly demanded feature. Most people who talked to me about job batches were familiar with &lt;a href=&quot;https://sidekiq.org/products/pro.html&quot;&gt;Sidekiq Pro&lt;/a&gt; ‘s &lt;a href=&quot;https://github.com/mperham/sidekiq/wiki/Batches]&quot;&gt;batch functionality&lt;/a&gt;, which I didn’t want to simply recreate (Sidekiq Pro is excellent!). So I’ve been collecting use cases and thinking about what’s most in the spirit of Rails, Active Job, and Postgres:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Batches are mutable, database-backed objects with foreign-key relationships to sets of job records.&lt;/li&gt;
  &lt;li&gt;Batches have  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;properties&lt;/code&gt; which use Active Job’s serializer, so they can contain and rehydrate any GlobalID object, like Active Record models.&lt;/li&gt;
  &lt;li&gt;Batches have callbacks, which are themselves Active Job jobs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s a simple example:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;GoodJob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Batch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;on_finish: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MyBatchCallbackJob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;user: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;MyJob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform_later&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;OtherJob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform_later&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# When these jobs have finished, it will enqueue your `MyBatchCallbackJob.perform_later(batch, options)`&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyBatchCallbackJob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationJob&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Callback jobs must accept a `batch` and `params` argument&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;batch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# The batch object will contain the Batch&apos;s properties, which are mutable&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;batch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &amp;lt;User id: 1, ...&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Params is a hash containing additional context (more may be added in the future)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; :finish, :success, :discard&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There’s more depth and examples in the &lt;a href=&quot;https://github.com/bensheldon/good_job#batches&quot;&gt;GoodJob Batch documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;please-help&quot;&gt;Please help!&lt;/h3&gt;

&lt;p&gt;Batches are definitely a work in progress, and I’d love your feedback:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What is the Batch functionality missing? Tell me your use cases.&lt;/li&gt;
  &lt;li&gt;Help improve the &lt;a href=&quot;https://goodjob-demo.herokuapp.com/good_job/jobs&quot;&gt;Web Dashboard UI&lt;/a&gt; (it’s rough but functional!)&lt;/li&gt;
  &lt;li&gt;Find bugs! I’m sure there are some edge cases I overlooked.&lt;/li&gt;
&lt;/ul&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/02/introducing-goodjob-bulk-and-batch&quot;&gt;Introducing GoodJob Bulk and Batch&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Sun, 05 Feb 2023 22:37:00 +0000</pubDate>
  <link>https://island94.org/2023/02/introducing-goodjob-bulk-and-batch</link>
  <guid isPermaLink="true">https://island94.org/2023/02/introducing-goodjob-bulk-and-batch</guid>
  
    <category>GoodJob</category>
  
  
</item>

      
    
      
        




<item>
  <title>Framing open source contributions at work</title>
  <description>&lt;p&gt;Excerpts from the excellent RailsConf 2022 keynote: &lt;a href=&quot;https://www.youtube.com/watch?v=MbqJzACF-54&quot;&gt;The Success of Ruby on Rails by Eileen Uchitelle&lt;/a&gt; [reformatted from the transcript]:&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;Upgrading is one of the easiest ways to find an area of Rails that can benefit from your contributions.  Fixing an issue in a recent release has a high likelihood of being merged.&lt;/p&gt;

  &lt;p&gt;Running off Rails Main is another way to find contributions to Rails.  If you don’t want to run your Main in production,   you could run it in a separate CI build.  Shopify, GitHub and Basecamp run it.&lt;/p&gt;

  &lt;p&gt;Running off Main may be harder than running off a release because features and bug fixes are  a little in flux sometimes. If you are running  off of Main, a feature added to the Main branch could be removed without deprecation. This is a worthwhile risk to take on because it lowers the overall risk of an upgrade.  When you run off Main, you’re less likely to fall behind upgrading because it becomes  part of your weekly or monthly maintenance.  Upgrading becomes routine, second nature rather  than novel and scary. Changes are easy to isolate. It’s just slightly less polished. Like I  said, I still think it’s pretty stable.&lt;/p&gt;

  &lt;p&gt;Another way to find places to contribute  is look at your own applications.&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Do you have monkey patches on Rails code  that are fixes bugs or changing behavior?   Instead of leaving them there, upstream  the fix and delete the monkey patch.&lt;/li&gt;
    &lt;li&gt;Is there infrastructure level code that  doesn’t really pertain to your product? It’s possible this could be a great addition to  Rails. When I wrote the database in Rails, it came from GitHub’s monolith. It made perfect sense  because it was getting in the way of upgrades, didn’t expose any intellectual property, had  nothing to do with your product features and&lt;br /&gt;
something many applications could benefit from.&lt;/li&gt;
    &lt;li&gt;Lastly and most importantly, keep showing up.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;… Ultimately,  if more companies treated the framework as an extension of the application, it would  result in higher resilience and stability. Investment in Rails ensures your foundation will not crumble under the weight of your application. Treating it as an unimportant part of your application is a mistake and many, many leaders make this mistake.&lt;/p&gt;

  &lt;p&gt;…leaders see funding open source risky is because they don’t actually  understand the work. … Often, leaders worry if there’s a team working in open source, other teams are going to be jealous or resentful that that team is doing “fun” work. …&lt;/p&gt;

  &lt;p&gt;Maintainers need to make changes, deal with security incidents and also handle criticism from many people. Maintaining and contributing to open source requires a different skill set than product work. That doesn’t make it any less essential.&lt;/p&gt;

  &lt;p&gt;…Many product companies don’t like words like “research” and “experimental.”  They can imply work without goals. Use words like  “investment.” And demonstrate the direct value will bring. Make sure it is measurable and will  make the application and product more successful. A great example of measurable work is  a change that improves performance. If you can tie contributions to direct customer improvements, it’s easier to show leadership.&lt;/p&gt;

  &lt;p&gt;…As I started contributing more and more  and pealing back the layers of Rails, the impact is limitless. I started looking at how applications stretched  the boundaries of what Rails was meant to do.&lt;/p&gt;

  &lt;p&gt;…Ultimately, I want you to contribute to Rails because it’s going to enable you to build a better company and product. The benefits of investing in Rails go far beyond improving the framework.&lt;/p&gt;

  &lt;p&gt;Investing in Rails will build up the skills of your engineering team. They will developer better communication skills, learn to navigate criticism,  debugging skills and how the framework functions.  It will teach engineers about the inner-workings and catch bugs.&lt;/p&gt;

  &lt;p&gt;Monkey patching is far more dangerous than I think most realize. They break  with upgrades and cause security incidents.  When you write a monkey patch, you maintain a portion of Rails code. Wouldn’t it have been   better to patch it upstream rather than taking on that risk and responsibility.&lt;/p&gt;

  &lt;p&gt;It will give your engineering team the skills  they need to make better technical decisions. You’re ensuring that Rails benefits your application and the company for the long-term.&lt;/p&gt;

  &lt;p&gt;…Contributing to Rails is only &lt;em&gt;not&lt;/em&gt; essential if you don’t care about the direction the framework is headed in. We should be contributing  because we care about the changes.&lt;/p&gt;

  &lt;p&gt;We want to ensure our apps are upgradeable, performant and stable.&lt;/p&gt;

  &lt;p&gt;Investment in Rails also means you won’t have to rewrite your application in a few years because Rails no longer supports what you need. When you fail  to invest in your tools, you end up being unable to upgrade. Your engineering team is miserable. The codebase is a mess and writing features is impossible. You’re forced into a rewrite, your engineers want to write Rails and you can no longer let them do that. You have to build a bunch of features before you site falls over.&lt;/p&gt;

  &lt;p&gt;It’s not Rails’ fault you made  the decision to invest elsewhere.&lt;/p&gt;

  &lt;p&gt;If you build contributing into your culture, the benefits are clear:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Your engineering teams’ skills will improve.&lt;/li&gt;
    &lt;li&gt;Rails will evolve with your  application because you’re helping decide how it needs to change.&lt;/li&gt;
    &lt;li&gt;Your application will be  more resilient because there’s low tech debt and your foundation is stable. Active investment  prevents your application from degrading.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;Building a team to invest in Rails is  proactive. Rewriting an application is reactive. Which one do you think is better for business in the long run?&lt;/p&gt;

&lt;/blockquote&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/01/framing-open-source-contributions-at-work&quot;&gt;Framing open source contributions at work&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Fri, 27 Jan 2023 00:51:00 +0000</pubDate>
  <link>https://island94.org/2023/01/framing-open-source-contributions-at-work</link>
  <guid isPermaLink="true">https://island94.org/2023/01/framing-open-source-contributions-at-work</guid>
  
  
</item>

      
    
  </channel>
</rss>
