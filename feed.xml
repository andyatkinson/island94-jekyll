<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Island94.org</title>
    <description>A Lost and Found
</description>
    <link>https://island94.org/</link>
    <atom:link href="https://island94.org/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 03 Aug 2023 13:27:57 +0000</pubDate>
    <lastBuildDate>Thu, 03 Aug 2023 13:27:57 +0000</lastBuildDate>
    <generator>Jekyll v4.3.2</generator>
    
    
      
        




<item>
  <title>Systems of utopia</title>
  <description>&lt;p&gt;I found these two essays juxtaposed in my feed reader and they both rang true. The first is Matt Stoller’s &lt;a href=&quot;https://www.thebignewsletter.com/p/the-long-annoying-tradition-of-anti&quot;&gt;“The Long Annoying Tradition of Anti-Patriotism”&lt;/a&gt;, with a particular emphasis on a disordered appeal to utopia in society at large (emphasis mine):&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;Anti-populism, and its cousin of anti-patriotism, is alluring for our elites. Many lack faith in fellow citizens, and think the work of convincing a large complex country isn’t worth it, or may not even be possible. &lt;strong&gt;Others can’t imagine politics itself as a useful endeavor because they believe in a utopia.&lt;/strong&gt; Indeed, those who believe in certain forms of socialism and libertarianism believe that politics itself shouldn’t exist, that one must perfect the soul of human-kind, and then the messy work of making a society will become unnecessary. In this frame, political institutions, like courts, corporations, and government agencies, are unimportant except as aesthetic objects.&lt;/p&gt;

  &lt;p&gt;Anti-populism and anti-patriotism leads nowhere, because these attitudes are about convincing citizens to give up their power, to give up on the idea that America is a place we can do politics to make a society.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;And then closer to work, on engineering leadership in Will Larsen’s &lt;a href=&quot;https://lethain.com/building-prestige/&quot;&gt;“Building personal and organizational prestige”&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;In my experience, &lt;strong&gt;engineers confronted with a new problem often leap to creating a system to solve that problem rather than addressing it directly&lt;/strong&gt;. I’ve found this particularly true when engineers approach a problem domain they don’t yet understand well, including building prestige.&lt;/p&gt;

  &lt;p&gt;For example, when an organization decides to invest into its engineering brand, the initial plan will often focus on project execution. It’ll include a goal for publishing frequency, ensuring content is representationally accurate across different engineering sub-domains, and how to incentivize participants to contribute. If you follow the project plan carefully, you will technically have built an engineering brand, but my experience is that it’ll be both more work and less effective than a less systematic approach.&lt;/p&gt;

&lt;/blockquote&gt;


  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/07/systems-of-utopia&quot;&gt;Systems of utopia&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Thu, 13 Jul 2023 15:24:00 +0000</pubDate>
  <link>https://island94.org/2023/07/systems-of-utopia</link>
  <guid isPermaLink="true">https://island94.org/2023/07/systems-of-utopia</guid>
  
  
</item>

      
    
      
        




<item>
  <title>19 sales &amp; marketing strategies in 19 weeks</title>
  <description>&lt;p&gt;The book &lt;a href=&quot;https://www.goodreads.com/pt/book/show/24693635-traction&quot;&gt;&lt;em&gt;Traction&lt;/em&gt;&lt;/a&gt;, by Gabriel Weinberg and Justin Mares has an unstated thesis I find compelling:&lt;/p&gt;

&lt;p&gt;Comprehensive, grinding, tryhard mediocrity over narrow, stabby, hopeful genius.&lt;/p&gt;

&lt;p&gt;Or: boil the sales &amp;amp; marketing ocean with these spreadsheets and punchlists (a marketing lifestyle I associate with Penny Arcade’s &lt;a href=&quot;https://www.reddit.com/r/IAmA/comments/nx0bs/comment/c3cm3zm/&quot;&gt;former business manager&lt;/a&gt; with &lt;a href=&quot;https://web.archive.org/web/20120107151014/http://penny-arcade.com/khoo/viral&quot;&gt;stuff like this&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;There are lots of quotes from like Paul Graham, Peter Thiel, Marc Andreesen. This is what one signs up for in a book like this. Also replace “traction” with “sales and marketing”:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;…spend your time constructing your product or service and testing traction channels &lt;em&gt;in parallel&lt;/em&gt;…. We strongly believe that many startups give up way too early… You should always have an explicit traction goal you’re working toward.&lt;/p&gt;

  &lt;p&gt;…The importance of choosing the right traction goal cannot be overstated. Are you going for growth or “profitability, or something in between? If you need to raise money in X months, what traction do you need to show to do so? These are the types of questions that help you determine the right traction goal.&lt;/p&gt;

  &lt;p&gt;Once that is defined, you can work backward and set clear quantitative and time-based traction subgoals, such as reaching one thousand customers by next quarter or hitting 20 percent monthly growth targets. Clear subgoals provide accountability. By placing traction activities on the same calendar as product development and other company milestones, you ensure that enough of your time will be spent on traction.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It feels a little dumb pulling out quotes, but also I get security from seeing it not be overthought:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Put half your efforts into getting traction&lt;/li&gt;
  &lt;li&gt;Learn what growth numbers potential investors respect&lt;/li&gt;
  &lt;li&gt;Set your growth goals: Set quantitative numbers.&lt;/li&gt;
  &lt;li&gt;Find your bright spots: if not hitting quantitative numbers, who is qualitively excited and try to learn from them and replan.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And then the spreadsheets. There are pictures of spreadsheets, and descriptions of columns in spreadsheets. It’s great!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;How much will it cost to acquire customers through this channel?&lt;/li&gt;
  &lt;li&gt;How many customers are available through this channel&lt;/li&gt;
  &lt;li&gt;Are the customers that you are getting through this channel the kind of customers that you want right now?&lt;/li&gt;
  &lt;li&gt;What’s the lifetime value of this customer&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;“…we encourage you to be as quantitative as possible, even if it is just guesstimating at first.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And the 19 strategies:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Targeting Blogs&lt;/strong&gt;: building up from tiny outlets to large&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Publicity&lt;/strong&gt;: building relationships with journalists, HARO.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Unconventional PR&lt;/strong&gt;: stunts, customer appreciation&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Search Engine Marketing&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Social and Display Ads&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Offline Ads&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Search Engine Optimization&lt;/strong&gt;: fat-head (narrow ranking) and long-tail (lots of landing page content, content marketing farming) strategies. Google Adword’s Keyword Planner,  Open Site Explorer.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Content Marketing&lt;/strong&gt;. Spend 6 months blogging do stuff that doesn’t scale (contact influential people, do guest posts, write about recent news events, nerd out)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Email Marketing&lt;/strong&gt;: with your own mailing list or advertise on other mailing lists. Transactional funnel reminders, retention, upselling/expansion, referral emails too.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Viral Marketing&lt;/strong&gt;: map out the loop.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Engineering as Marketing&lt;/strong&gt;: giveaway tools/services (lol, examples are all SEO companies building free SEO tools for marketers, not necessarily engineering)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Business Development&lt;/strong&gt;: partnerships, joint ventures, licensing, distribution, supply. Boil the ocean of potential partners, spreadsheet and pipeline it.  Identify who is in charge of the partner’s metric you’re targeting, and make your cold emails forwardable. Write a memo to yourself afterwords “how the deal was done” (how long it took to get to milestones, key contacts, sticking points, partner’s specific interests and influences)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sales&lt;/strong&gt;. It’s sales! lol, about time wasters (“have you ever brought other technology into your company?”)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Affiliate Programs&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Existing Platforms&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Trade Shows&lt;/strong&gt;. Prep, prep, prep.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Offline Events&lt;/strong&gt;. Conferences.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Speaking Engagements&lt;/strong&gt;. Answer upfront “Why are you important enough to be the one giving the talk? What value can you offer me? …then… what your startup is doing, why you’re doing it, specifically how you got to where you are or where things are going.” Recycle and reuse the same 1 or 2 talks.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Community Building&lt;/strong&gt;. Nurturing connections among your customers.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There’s not even a conclusion! Just an acknowledgement and an appendix with specific suggested goals for each category in case the short chapters weren’t boiled enough. It’s not hard, it just takes work.&lt;/p&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/06/19-sales-marketing-strategies-in-19-weeks&quot;&gt;19 sales &amp; marketing strategies in 19 weeks&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Sun, 11 Jun 2023 22:37:00 +0000</pubDate>
  <link>https://island94.org/2023/06/19-sales-marketing-strategies-in-19-weeks</link>
  <guid isPermaLink="true">https://island94.org/2023/06/19-sales-marketing-strategies-in-19-weeks</guid>
  
  
</item>

      
    
      
        




<item>
  <title>Rebuilding Concurrent Ruby: ScheduledTask, Event, and TimerSet</title>
  <description>&lt;p&gt;I’ve been diving into &lt;a href=&quot;https://github.com/ruby-concurrency/concurrent-ruby&quot;&gt;Concurrent Ruby library&lt;/a&gt; a lot recently. I use Concurrent Ruby as the foundation for &lt;a href=&quot;https://github.com/bensheldon/good_job&quot;&gt;GoodJob&lt;/a&gt; where it has saved me immense time and grief because it has a lot of reliable, complex thread-safe primitives that are well-shaped for GoodJob’s needs. I’m a big fan of Concurrent Ruby.&lt;/p&gt;

&lt;p&gt;I wanted to cement some of my learnings and understandings by writing a quick blog post to explain how some parts of Concurrent Ruby work, in the spirit of Noah Gibb’s &lt;a href=&quot;https://rebuilding-rails.com/&quot;&gt;&lt;em&gt;Rebuilding Rails&lt;/em&gt;&lt;/a&gt;. In the following, I’ll be sharing runnable Ruby code that is similar to how Concurrent Ruby solves the same kind of problems. That said, &lt;strong&gt;Concurrent Ruby is much, much safer—and thus a little more complex—than what I’m writing here&lt;/strong&gt; so please, if you need this functionality, use Concurrent Ruby directly.&lt;/p&gt;

&lt;h3 id=&quot;the-use-case-future-scheduled-tasks&quot;&gt;The use case: future scheduled tasks&lt;/h3&gt;

&lt;p&gt;Imagine you want to run some bits of code, at a point in time in the future. It might look like this example creating several tasks at once with varying delays in seconds:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;ScheduledTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# run some code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;ScheduledTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# run some code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;ScheduledTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# run some code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In Concurrent Ruby, the object to do this is a &lt;a href=&quot;https://ruby-concurrency.github.io/concurrent-ruby/1.2.0/Concurrent/ScheduledTask.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Concurrent::ScheduledTask&lt;/code&gt;&lt;/a&gt; (good name, right?). A ScheduledTask will wait &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delay&lt;/code&gt; seconds and then run the block of code on a background thread.&lt;/p&gt;

&lt;p&gt;Behind the ScheduledTask is the real star: the &lt;a href=&quot;https://ruby-concurrency.github.io/concurrent-ruby/1.2.0/Concurrent/TimerSet.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Concurrent::TimerSet&lt;/code&gt;&lt;/a&gt;, which executes a collection of tasks, each after a given delay. Let’s break down the components of a TimerSet:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;TimerSet maintains a list of tasks, ordered by their delays, with the soonest first&lt;/li&gt;
  &lt;li&gt;TimerSet runs a reactor-like loop in a background thread. This thread will peek at the next occurring task and wait/sleep until it occurs, then pop the task to execute it.&lt;/li&gt;
  &lt;li&gt;TimerSet uses a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Concurrent::Event&lt;/code&gt; (which is like a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mutex&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConditionVariable&lt;/code&gt; combined in a convenient package) to interrupt the sleeping reactor when new tasks are created.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ll give examples of each of these. But first, you may be asking….&lt;/p&gt;

&lt;h2 id=&quot;why-is-this-so-hard&quot;&gt;Why is this so hard?&lt;/h2&gt;

&lt;p&gt;This is a lot of objects working together to accomplish the use case. This is why:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ruby threads have a cost, so we can’t simply create a new thread for each and every task, putting it to sleep until an individual task is intended to be triggered. That would be a lot of threads.&lt;/li&gt;
  &lt;li&gt;Ruby threads &lt;a href=&quot;http://headius.blogspot.com/2008/02/rubys-threadraise-threadkill-timeoutrb.html&quot;&gt;aren’t safe be canceled/killed&lt;/a&gt;, so we can’t, for example, create a single thread for the soonest task but then terminate it and create a new thread if new task is created with a sooner time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following section will show how these objects are put together. Again, this is not the exact Concurrent Ruby implementation, but it’s the general shape of how Concurrent Ruby solves this use case.&lt;/p&gt;

&lt;h2 id=&quot;the-event&quot;&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Event&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Concurrent Ruby describes a &lt;a href=&quot;https://github.com/ruby-concurrency/concurrent-ruby/blob/9f40827be9a8a192a6993a8d157bd3ed0662ada0/lib/concurrent-ruby/concurrent/atomic/event.rb&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Concurrent::Event&lt;/code&gt;&lt;/a&gt; as:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Old school kernel-style event reminiscent of Win32 programming in C++.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I don’t know what that means exactly, but an Event can be in either a set or unset state, and it can wait (with a timeout!) and be awakened via signals across threads.&lt;/p&gt;

&lt;p&gt;I earlier described &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Event&lt;/code&gt; as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mutex&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConditionVariable&lt;/code&gt; packaged together. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConditionVariable&lt;/code&gt;is the star here, and the mutex is simply a supporting actor because the ConditionVariable requires it.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://docs.ruby-lang.org/en/3.2/Thread/ConditionVariable.html&quot;&gt;Ruby &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConditionVariable&lt;/code&gt;&lt;/a&gt; has two features that are perfect for multithreaded programming:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wait&lt;/code&gt;, which is blocking and will put a thread to sleep, with an optional timeout&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set&lt;/code&gt;, which broadcasts a signal to any waiting threads to wake up.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jesse Storimer’s excellent and free ebook &lt;em&gt;Working with Ruby Threads&lt;/em&gt; has a great &lt;a href=&quot;https://workingwithruby.com/wwrt/condvars/&quot;&gt;section on ConditionVariables&lt;/a&gt; and why the mutex is a necessary part of the implementation.&lt;/p&gt;

&lt;p&gt;Here’s some code that implements an Event with an example to show how it can wake up a thread:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Event&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@mutex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@condition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ConditionVariable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;synchronize&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;synchronize&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;broadcast&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;synchronize&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here’s a simple example of an Event running in a loop to show how it might be used:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;running&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# A simple loop in a thread&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;running&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# loop every second unless signaled&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Event has been set&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Exiting thread&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; Event has been set&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; Event has been set&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# let the thread exit&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;running&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; Exiting thread&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;the-scheduledtask&quot;&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ScheduledTask&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The implementation of the ScheduledTask isn’t too important in this explanation, but I’ll sketch out the necessary pieces, which match up with a &lt;a href=&quot;https://github.com/ruby-concurrency/concurrent-ruby/blob/9f40827be9a8a192a6993a8d157bd3ed0662ada0/lib/concurrent-ruby/concurrent/scheduled_task.rb&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Concurrent::ScheduledTask&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# GLOBAL_TIMER_SET = TimerSet.new&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ScheduledTask&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:schedule_time&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timer_set: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GLOBAL_TIMER_SET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scheduled_task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;timer_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;post_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scheduled_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@schedule_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;schedule_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;schedule_time&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A couple things to call out here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GLOBAL_TIMER_SET&lt;/code&gt; is necessary so that all ScheduledTasks are added to the same TimerSet. In Concurrent Ruby, this is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Concurrent.global_timer_set&lt;/code&gt;, though a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ScheduledTask.execute&lt;/code&gt; can be given an explicit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;timer_set:&lt;/code&gt; parameter if an application has multiple TimerSets (for example, GoodJob initializes its own TimerSet for finer lifecycle management).&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;=&amp;gt;&lt;/code&gt; comparison operator, which will be used to keep our list of tasks sorted with the soonest tasks first.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-timerset&quot;&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TimerSet&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Now we have the pieces necessary to implement a TimerSet and fulfill our use case. The TimerSet implemented here is very similar to a &lt;a href=&quot;https://github.com/ruby-concurrency/concurrent-ruby/blob/9f40827be9a8a192a6993a8d157bd3ed0662ada0/lib/concurrent-ruby/concurrent/executor/timer_set.rb&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Concurrent::TimerSet&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TimerSet&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@mutex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;post_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;synchronize&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sort!&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;process_tasks&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;shutdown&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;synchronize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clear&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@thread&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process_tasks&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Peek the first item in the queue&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;synchronize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;schedule_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;# Pop the first item in the queue&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;synchronize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;schedule_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;min&lt;/span&gt;
          &lt;span class=&quot;vi&quot;&gt;@event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There’s a lot going on here, but here are the landmarks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In this TimerSet, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@queue&lt;/code&gt; is an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array&lt;/code&gt; that we explicitly call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sort!&lt;/code&gt; on so that the soonest task is always first in the array. In the Concurrent Ruby implementation, that’s done more elegantly with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Concurrent::Collection::NonConcurrentPriorityQueue&lt;/code&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@mutex&lt;/code&gt; is used to make sure that adding/sorting/peeking/popping operations on the queue are synchronized and safe across threads.&lt;/li&gt;
  &lt;li&gt;The magic happens in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#process_tasks&lt;/code&gt;, which creates a new thread and starts up a loop. It loops over the first task in the queue (the soonest):
    &lt;ul&gt;
      &lt;li&gt;If there is no task, it breaks the loop and exits the thread.&lt;/li&gt;
      &lt;li&gt;If there is a task, it checks whether it’s time to run, and if so, runs it. If it’s not time yet, it uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Event#wait&lt;/code&gt; until it &lt;em&gt;is&lt;/em&gt; time to run, or 60 seconds, whichever is sooner. That 60 seconds is a magic number in the real implementation, and I assume that’s to reduce clock drift. Remember,  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Event#wait&lt;/code&gt; is signalable, so if a new task is added, the loop will be immediately restarted and the delay recalculated.&lt;/li&gt;
      &lt;li&gt;In real Concurrent Ruby, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;task.run&lt;/code&gt; is posted to a separate thread pool where it won’t block or slow down the loop.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Event#set&lt;/code&gt; is called inside of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#add_task&lt;/code&gt; which inserts new tasks into the queue. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;process_tasks&lt;/code&gt; background thread is only created &lt;em&gt;the first time&lt;/em&gt; a task is added to the queue after the queue has been emptied. This minimizes the number of active threads.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Event#reset&lt;/code&gt; is called when the queue is first peeked in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;process_tasks&lt;/code&gt;. There’s a lot of subtle race conditions being guarded against in a TimerSet. Calling reset unsets the event at the top of the loop to allow the Event to be set again before the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Event#wait&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And finally, we can put all of the pieces together to fulfill our use case of scheduled tasks:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;GLOBAL_TIMER_SET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TimerSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;ScheduledTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;This is the first task&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;ScheduledTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;This is the third task&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;ScheduledTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;This is the second task&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;GLOBAL_TIMER_SET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shutdown&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; This is the first task&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; This is the second task&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; This is the third task&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;thats-it&quot;&gt;That’s it!&lt;/h3&gt;

&lt;p&gt;The TimerSet is a really neat object that’s powered by an Event, which is itself powered by a ConditionVariable. There’s a lot of fun thread-based signaling happening here!&lt;/p&gt;

&lt;p&gt;While writing my post, I came across a 2014 post from Job Vranish entitled &lt;a href=&quot;https://spin.atomicobject.com/2014/07/07/ruby-queue-pop-timeout/&quot;&gt;“Ruby Queue Pop with Timeout”&lt;/a&gt;, which builds something very similar looking using the same primitives. In the comments, Mike Perham linked to &lt;a href=&quot;https://github.com/mperham/connection_pool/blob/f83b6304c0e5936b1b286b26a73f3febda051c9b/lib/connection_pool/timed_stack.rb&quot;&gt;Connection Pool’s TimedStack&lt;/a&gt; which also looks similar. Again &lt;strong&gt;please use a real library like Concurrent Ruby or Connection Pool.&lt;/strong&gt; This was just for explanatory purposes 👍&lt;/p&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/06/rebuilding-concurrent-ruby-scheduledtask-event-and-timerset&quot;&gt;Rebuilding Concurrent Ruby: ScheduledTask, Event, and TimerSet&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Thu, 01 Jun 2023 01:44:00 +0000</pubDate>
  <link>https://island94.org/2023/06/rebuilding-concurrent-ruby-scheduledtask-event-and-timerset</link>
  <guid isPermaLink="true">https://island94.org/2023/06/rebuilding-concurrent-ruby-scheduledtask-event-and-timerset</guid>
  
    <category>ruby</category>
  
    <category>GoodJob</category>
  
  
</item>

      
    
      
        




<item>
  <title>Whatever you do, don&apos;t autoload Rails `lib/`</title>
  <description>&lt;p&gt;One of the most common problems I encounter consulting on Rails projects is that developers have previously added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/&lt;/code&gt; to autoload paths and then twisted themselves into knots creating error-prone, project-specific conventions for subsequently un-autoloading a subset of files also in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Don’t do it. Don’t add your Rails project’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/&lt;/code&gt; to autoload paths.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;how-does-this-happen&quot;&gt;How does this happen?&lt;/h3&gt;

&lt;p&gt;A growing Rails application will accumulate a lot of ruby classes and files that don’t cleanly fit into the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/&lt;/code&gt; directories of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;controllers&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;helpers&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jobs&lt;/code&gt;, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;models&lt;/code&gt;. Developers should also be creating new directories in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/*&lt;/code&gt; to organize like-with-like files (your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/services/&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/merchants/&lt;/code&gt;, etc.). That’s ok!&lt;/p&gt;

&lt;p&gt;But frequently there are one-off classes that don’t seem to rise to the level of their own directory in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/&lt;/code&gt;. From looking through the cruft of projects like &lt;a href=&quot;https://github.com/mastodon/mastodon/tree/c62604b5f69c3ad7f5449e0a7dc26606adebb777/app/lib&quot;&gt;Mastodon&lt;/a&gt; or applications &lt;a href=&quot;https://github.com/codeforamerica/vita-min/tree/2f5faf06f586d1ea3915af262aab7683240f4727/app/lib&quot;&gt;I’ve&lt;/a&gt; &lt;a href=&quot;https://github.com/bensheldon/open311status/blob/2cd70e391770f64d734f462624222fb8f8bc14a4/app/lib/service_requests_pager.rb&quot;&gt;worked&lt;/a&gt; &lt;a href=&quot;https://github.com/bensheldon/open311status/tree/2cd70e391770f64d734f462624222fb8f8bc14a4/app/lib&quot;&gt;on&lt;/a&gt;, these files look like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A lone form builder&lt;/li&gt;
  &lt;li&gt;POROs (“Plain old Ruby objects”) like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PhoneNumberFormatter&lt;/code&gt;, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ZipCodes&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Seeder&lt;/code&gt;, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pagination&lt;/code&gt;. Objects that serve a single purpose and are largely singletons/identity objects within the application.&lt;/li&gt;
  &lt;li&gt;Boilerplate classes for 3rd party gems, e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ApplicationResponder&lt;/code&gt; for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;responders gem&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That these files accumulate in a project is a fact of life. When choosing where to put them, that’s when things can go wrong.&lt;/p&gt;

&lt;p&gt;In a newly built Rails project &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/&lt;/code&gt; looks like the natural place for these. But &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/&lt;/code&gt; has a downside: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/&lt;/code&gt; is not autoloaded. This can come as a surprise, even to experienced developers, because they have been accustomed to the convenience of autoloaded files in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/&lt;/code&gt;. It’s not difficult to add an explicit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;require&lt;/code&gt; statement into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application.rb&lt;/code&gt; or in an initializer, but that may not be one’s first thought.&lt;/p&gt;

&lt;p&gt;That’s when people jump to googling “how to autoload &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/&lt;/code&gt;”. Don’t do it! &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/&lt;/code&gt; should not be autoloaded.&lt;/p&gt;

&lt;p&gt;The problem with autoloading &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/&lt;/code&gt; is that there will subsequently be files added to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/&lt;/code&gt; that should &lt;em&gt;not&lt;/em&gt; be autoloaded; because they should only be provisionally loaded in a certain environment or context, or deferred, for behavioral, performance, or memory reasons. If your project has already enabled autoloading on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/&lt;/code&gt;, it’s now likely you’ll then add additional configuration to un-autoload the new files. These overrides and counter-overrides accumulate over time and become difficult to understand and unwind, and they cause breakage because someone’s intuition of what will or won’t be loaded in a certain environment or context is wrong.&lt;/p&gt;

&lt;p&gt;What should you do instead?&lt;/p&gt;

&lt;h3 id=&quot;an-omakase-solution&quot;&gt;An omakase solution&lt;/h3&gt;

&lt;p&gt;DHH &lt;a href=&quot;https://github.com/rails/rails/pull/47843#issuecomment-1515367267&quot;&gt;writes&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/&lt;/code&gt; is intended to be for non-app specific library code that just happens to live in the app for now (usually pending extraction into open source or whatever). Everything app specific that’s part of the domain model should live in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/models&lt;/code&gt; (that directory is for POROs as much as ARs)… Stuff like a generic PhoneNumberFormatter is exactly what &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/&lt;/code&gt; is intended for. And if it’s app specific, for some reason, then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/models&lt;/code&gt; is fine.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The omakase solution is to manually require files from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/&lt;/code&gt; or use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/models&lt;/code&gt; generically to mean “Domain Models” rather than solely Active Record models. That’s great! Do that.&lt;/p&gt;

&lt;h3 id=&quot;a-best-practice&quot;&gt;A best practice&lt;/h3&gt;

&lt;p&gt;Xavier Noria, Zeitwerk’s creator &lt;a href=&quot;https://github.com/rails/rails/issues/37835#issuecomment-757367812&quot;&gt;writes&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The best practice to accomplish that nowadays is to move that code to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/lib&lt;/code&gt;. Only the Ruby code you want to reload, tasks or other auxiliary files are OK in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sidekiq’s Problems and Troubleshooting &lt;a href=&quot;https://github.com/sidekiq/sidekiq/wiki/Problems-and-Troubleshooting#autoloading&quot;&gt;explains&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/&lt;/code&gt; directory will only cause pain. Move the code to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/lib/&lt;/code&gt; and make sure the code inside follows the class/filename conventions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The best practice is to create an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/lib/&lt;/code&gt; directory to home these files. &lt;a href=&quot;https://github.com/mastodon/mastodon/tree/c62604b5f69c3ad7f5449e0a7dc26606adebb777/app/lib&quot;&gt;Mastodon&lt;/a&gt; does it, as do &lt;a href=&quot;https://github.com/search?type=code&amp;amp;auto_enroll=true&amp;amp;q=path%3A%2F%5Eapp%5C%2Flib%5C%2F.*%5C.rb%2F&quot;&gt;many others&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This “best practice” is not without contention, as usually anything in Rails that deviates from omakase does, like RSpec instead of MiniTest or FactoryBot instead of Fixtures. But creating &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/lib&lt;/code&gt; as a convention for Rails apps works for me and many others.&lt;/p&gt;

&lt;h3 id=&quot;really-dont-autoload-lib&quot;&gt;Really, don’t autoload &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Whatever path you take, don’t take the path of autoloading &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/&lt;/code&gt;.&lt;/p&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/05/whatever-you-do-don-t-autoload-rails-lib&quot;&gt;Whatever you do, don&apos;t autoload Rails `lib/`&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Tue, 02 May 2023 14:09:00 +0000</pubDate>
  <link>https://island94.org/2023/05/whatever-you-do-don-t-autoload-rails-lib</link>
  <guid isPermaLink="true">https://island94.org/2023/05/whatever-you-do-don-t-autoload-rails-lib</guid>
  
  
</item>

      
    
      
        






<item>
  <title>I read &quot;The Constant Rabbit&quot; by Jasper Fforde</title>
  <description>&lt;p&gt;An “Event” has caused rabbits to become anthropomophic. This exchange is the book in a walnut-shell:&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;So while we ate the excellent walnut cake that the Venerable Bunty’s mother’s sister’s daughter’s husband’s son had baked, Venerable Bunty and Connie told us about life inside the colonies, which despite the lack of freedom and limited space were the only areas within the United Kingdom that ran themselves entirely on rabbit socio-egalitarian principles.&lt;/p&gt;

  &lt;p&gt;‘It’s occasionally aggressive and often uncompromising,’ said Finkle, ‘but from what I’ve seen of both systems, a country run on rabbit principles would be a step forward – although to be honest, I’m not sure we’d be neurologically suited to the regime. While most humans are wired to be reasonably decent, a few are wired to be utter shits – and they do tend to tip the balance.’&lt;/p&gt;

  &lt;p&gt;‘The decent humans are generally supportive of doing the right thing,’ said the Venerable Bunty, ‘but never take it much farther than that. You’re trashing the ecosystem for no reason other than a deluded sense of anthropocentric manifest destiny, and until you stop talking around the issue and actually feel some genuine guilt, there’ll be no change.’&lt;/p&gt;

  &lt;p&gt;‘Shame, for want of a better word, is good,’ said Finkle. ‘Shame is right, shame works. Shame is the gateway emotion to increased self-criticism, which leads to realisation, an apology, outrage and eventually meaningful action. We’re not holding our breaths that any appreciable numbers can be arsed to make the journey along that difficult chain of emotional honesty – many good people get past realisation, only to then get horribly stuck at apology – but we live in hope.’&lt;/p&gt;

  &lt;p&gt;‘I understand,’ I said, having felt that I too had yet to make the jump to apology.&lt;/p&gt;

  &lt;p&gt;‘It’s further evidence of satire being the engine of the Event,’ said Connie, ‘although if that’s true, we’re not sure for whose benefit.’&lt;/p&gt;

  &lt;p&gt;‘Certainly not humans’,’ said Finkle, ‘since satire is meant to highlight faults in a humorous way to achieve betterment, and if anything, the presence of rabbits has actually made humans worse.’&lt;/p&gt;

  &lt;p&gt;‘Maybe it’s the default position of humans when they feel threatened,’ I ventured, ‘although if I’m honest, I know a lot of people who claim to have “nothing against rabbits” but tacitly do nothing against the overt leporiphobia that surrounds them.’&lt;/p&gt;

  &lt;p&gt;‘Or maybe it’s just satire for comedy’s sake and nothing else,’ added Connie, ‘or even more useless, satire that provokes a few guffaws but only low to middling outrage – but is coupled with more talk and no action. A sort of  . . . empty cleverness.’&lt;/p&gt;

  &lt;p&gt;‘Maybe a small puff in the right moral direction is the best that could be hoped for,’ added Finkle thoughtfully. ‘Perhaps that’s what satire does – not change things wholesale but nudge the collective consciousness in a direction that favours justice and equality. Is there any more walnut cake?’&lt;/p&gt;

  &lt;p&gt;‘I’m afraid I had the last slice,’ I said, ‘but I did ask if anyone else wanted it.’&lt;/p&gt;

&lt;/blockquote&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This book review for &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/04/the-constant-rabbit&quot;&gt;The Constant Rabbit&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Sun, 30 Apr 2023 03:29:00 +0000</pubDate>
  <link>https://island94.org/2023/04/the-constant-rabbit</link>
  <guid isPermaLink="true">https://island94.org/2023/04/the-constant-rabbit</guid>
</item>

      
    
      
        






<item>
  <title>I read &quot;The Dawn of Everything&quot; by David Graeber and David Wengrow</title>
  <description>&lt;blockquote&gt;

  &lt;p&gt;If there is a particular story we should be telling, a big question we should be asking of human history (instead of the ‘origins of social inequality’), is it precisely this: how did we find ourselves stuck in just one form of social reality, and how did relations based ultimately on violence and domination come to be normalized within it?&lt;/p&gt;

  &lt;p&gt;…&lt;/p&gt;

  &lt;p&gt;What happens if we treat the rejection of urban life, or of slavery, [or of certain technologies] in certain times and places as something just as significant as the emergence of those same phenomena in others.&lt;/p&gt;

  &lt;p&gt;…&lt;/p&gt;

  &lt;p&gt;What is the purpose of all this new knowledge, if not to reshape our conceptions of who we are and what we might yet become? If not, in other words, to rediscover the meaning of our third basic freedom: the freedom to create new and different forms of social reality?&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;I imagine I’m already on board with David Graeber’s political project, so while I greatly enjoyed it, I found it too long by about a third.&lt;/p&gt;

&lt;p&gt;The overall thrust is that people are much more interesting and creative than we give them credit for, and there’s a lot (too much for me in this book) of historical evidence that this is the case. And that it’s bunk to claim that increasing social complexity and scale requires an authoritarian state or bureacracy. I guess it’s an argument to unstick the “End of History”-framing we’re mired in.&lt;/p&gt;

&lt;p&gt;Of various things I learned / was confronted with:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Indulging children is Native American practice. Makes sense cause it’s a common theme in Kim Stanley Robinson books of which the Haudenosaunee make frequent appearance too.&lt;/li&gt;
  &lt;li&gt;Roman-style property ownership (of which we inherit), is pretty fucked up when stared directly at, based on a patriarch’s relations with household slaves.&lt;/li&gt;
  &lt;li&gt;It seems like a pretty legit critique of Western society to point out that there are a lot of &lt;em&gt;legitimate&lt;/em&gt; ways poeple are free to harm other people during their every day life, and that’s got to be pretty warpy.&lt;/li&gt;
  &lt;li&gt;Spending more time imagining and debating the society and politics you want to live in… probably makes for a better society and politics. One of those, if it’s hard do it a lot sorts of things. And if that sounds annoying in the context of the present, that’s probably because we’ve severely narrowed the scope of debate and possibility.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There’s a lot of history and anthropology to boil down:&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;…the key point to remember is that we are not talking here about ‘freedom’ as an abstract ideal or formal principle (as in ‘Liberty, Equality and Fraternity!’). Over the course of these chapters we have instead talked about basic forms of social liberty which one might actually put into practice:&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;the freedom to move away or relocate from one’s surroundings;&lt;/li&gt;
    &lt;li&gt;the freedom to ignore or disobey commands issued by others; and&lt;/li&gt;
    &lt;li&gt;the freedom to shape entirely new social realities, or shift back and forth between different ones&lt;/li&gt;
  &lt;/ol&gt;

  &lt;p&gt;….three elementary principles of domination:&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;control of violence (or sovereignty),&lt;/li&gt;
    &lt;li&gt;control of knowledge, and&lt;/li&gt;
    &lt;li&gt;charismatic politics&lt;/li&gt;
  &lt;/ol&gt;

&lt;/blockquote&gt;

&lt;p&gt;…and a lot of historical and anthropoligical critique:&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;Environmental determinists have an unfortunate tendency to treat humans as little more than automata, living out some economist’s fantasy of rational calculation. To be fair, they don’t deny that human beings are quirky and imaginative creatures – they just seem to reason that, in the long run, this fact makes very little difference.&lt;/p&gt;

  &lt;p&gt;…&lt;/p&gt;

  &lt;p&gt;For much of the twentieth century, anthropologists tended to describe the societies they studied in ahistorical terms, as living in a kind of eternal present. Some of this was an effect of the colonial situation under which much ethnographic research was carried out. The British Empire, for instance, maintained a system of indirect rule in various parts of Africa, India and the Middle East where local institutions like royal courts, earth shrines, associations of clan elders, men’s houses and the like were maintained in place, indeed fixed by legislation. Major political change – forming a political party, say, or leading a prophetic movement – was in turn entirely illegal, and anyone who tried to do such things was likely to be put in prison. This obviously made it easier to describe the people anthropologists studied as having a way of life that was timeless and unchanging.&lt;/p&gt;

  &lt;p&gt;….&lt;/p&gt;

  &lt;p&gt;Social science has been largely a study of the ways in which human beings are not free: the way that our actions and understandings might be said to be determined by forces outside our control. Any account which appears to show human beings collectively shaping their own destiny, or even expressing freedom for its own sake, will likely be written off as illusory, awaiting ‘real’ scientific explanation; or if none is forthcoming (why do people dance?), as outside the scope of social theory entirely. This is one reason why most ‘big histories’ place such a strong focus on technology. Dividing up the human past according to the primary material from which tools and weapons were made (Stone Age, Bronze Age, Iron Age) or else describing it as a series of revolutionary breakthroughs (Agricultural Revolution, Urban Revolution, Industrial Revolution), they then assume that the technologies themselves largely determine the shape that human societies will take for centuries to come – or at least until the next abrupt and unexpected breakthrough comes along to change everything again.&lt;/p&gt;

  &lt;p&gt;…&lt;/p&gt;

  &lt;p&gt;Choosing to describe history the other way round, as a series of abrupt technological revolutions, each followed by long periods when we were prisoners of our own creations, has consequences. Ultimately it is a way of representing our species as decidedly less thoughtful, less creative, less free than we actually turn out to have been. It means not describing history as a continual series of new ideas and innovations, technical or otherwise, during which different communities made collective decisions about which technologies they saw fit to apply to everyday purposes, and which to keep confined to the domain of experimentation or ritual play. What is true of technological creativity is, of course, even more true of social creativity. One of the most striking patterns we discovered while researching this book – indeed, one of the patterns that felt most like a genuine breakthrough to us – was how, time and again in human history, that zone of ritual play has also acted as a site of social experimentation – even, in some ways, as an encyclopaedia of social possibilities.&lt;/p&gt;

&lt;/blockquote&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This book review for &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/04/the-dawn-of-everything&quot;&gt;The Dawn of Everything&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Sun, 30 Apr 2023 02:56:00 +0000</pubDate>
  <link>https://island94.org/2023/04/the-dawn-of-everything</link>
  <guid isPermaLink="true">https://island94.org/2023/04/the-dawn-of-everything</guid>
</item>

      
    
      
        




<item>
  <title>How GoodJob&apos;s mountable Rails Engine delivers Javascript importmaps and frontend assets</title>
  <description>&lt;p&gt;&lt;a href=&quot;https://github.com/bensheldon/good_job&quot;&gt;GoodJob&lt;/a&gt; is a multithreaded, Postgres-based ActiveJob backend for Ruby on Rails.&lt;/p&gt;

&lt;p&gt;GoodJob includes a full-featured (though optional) web dashboard to monitor and administer background jobs. The web dashboard is included in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;good_job&lt;/code&gt; gem as a mountable Rails Engine.&lt;/p&gt;

&lt;p&gt;As the maintainer of GoodJob, I want to make gem development easier for myself by innovating as little as possible. That’s why GoodJob builds on top of Active Record and Concurrent::Ruby.&lt;/p&gt;

&lt;p&gt;But, the frontend can be a beast. When thinking about how to build a full-featured web dashboard &lt;em&gt;packaged within a Rails Engine within a gem&lt;/em&gt;, I had three goals:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Be asset pipeline agnostic with zero dependencies.&lt;/strong&gt; As of Rails ~7.0, a Rails developer can choose between several different asset pipeline tools (Sprockets, Webpacker/Shakapacker, esbuild/jsbundling, etc.). That’s too many! I want to ensure what I package with GoodJob is compatible with all of them. I also don’t want to affect the parent application at all; everything must be independent and self-contained.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Allow easy patching/debugging.&lt;/strong&gt; I want the GoodJob web dashboard to work when using the Git repo directly in a project’s Gemfile or simply &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle open good_job&lt;/code&gt; to debug a problem.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Write contemporary frontend code.&lt;/strong&gt; I want to use Bootstrap UI, Stimulus, Rails UJS, and write modular JavaScript with imports. Maybe even Turbo!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And of course, I want GoodJob to be secure, performant, and a joy to develop and use for myself and the developer community.&lt;/p&gt;

&lt;p&gt;Read on for how I achieved it all (mostly!) with GoodJob.&lt;/p&gt;

&lt;h2 id=&quot;what-i-didnt-do&quot;&gt;What I didn’t do&lt;/h2&gt;

&lt;p&gt;Here’s all the things I considered, but decided not to do:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Nope: Manually construct/inline a small number of javascript files&lt;/strong&gt;: I did not want to manually build a javascript file, copy-pasting various various 3rd-party libraries into a single file, and then writing my code at the bottom. This seemed laborious and prone to error, especially when I would need to update a library; and my IDE doesn’t work well with large files so writing my own code would be difficult.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Nope: Precompile javascript in the repository or on gem build:&lt;/strong&gt; I did not want to force a pre-commit step to build javascript, or to only package built javascript into the gem because that would make patching and debugging difficult. Over my career I’ve struggled contributing to a number of otherwise fantastic gems that use this workflow pattern.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Nope: Compile javascript in the application:&lt;/strong&gt; Rails has too many different asset pipeline patterns right now for me to consider supporting them all. I consider this more a result of a highly fragmented frontend ecosystem than an indictment of Rails. I can’t imagine supporting all of the different options and whatever else shows up in the future at the same time. (I’m in awe of the gems that do; nice work &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rails_admin&lt;/code&gt;!)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-i-did-do&quot;&gt;What I did do&lt;/h2&gt;

&lt;p&gt;As I wrote earlier: “innovate as little as possible”:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Serve vanilla JS and CSS out of vanilla Routes/Controller&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GoodJob has explicit routes for frontend assets that wire up to a controller that serves those assets statically with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;render :file&lt;/code&gt;. Let’s break that down…&lt;/p&gt;

&lt;p&gt;In my Rails Engine’s router, I define a namescape, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;frontend&lt;/code&gt;, and two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get&lt;/code&gt; routes. The first route, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;modules&lt;/code&gt; , is for Javascript modules that will go into the importmap. The second route, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;static&lt;/code&gt; , is for Javascript and CSS that I’ll link/script directly in the HTML head.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# config/routes.rb&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:frontend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;controller: :frontends&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;modules/:name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;action: :module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;as: :frontend_module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;constraints: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;format: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;js&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;static/:name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;action: :static&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;as: :frontend_static&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;constraints: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;format: &lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%w[css js]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the matching controller, I create static constants that define hashes of files that are matched and served, which I store in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/frontend&lt;/code&gt; directory in my Rails Engine. &lt;em&gt;I want paths to be explicit for security reasons because passing any sort of dynamic file path through the URL could be a path traversal vulnerability.&lt;/em&gt; All of the frontend assets are stored in  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/frontend&lt;/code&gt; and served out of this controller:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# app/controllers/good_job/frontends_controller.rb&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;GoodJob&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FrontendsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActionController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# rubocop:disable Rails/ApplicationController&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;STATIC_ASSETS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;css: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;bootstrap: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GoodJob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;frontend&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;good_job&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;vendor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bootstrap&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bootstrap.min.css&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;style: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GoodJob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;frontend&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;good_job&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;style.css&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;js: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;bootstrap: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GoodJob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;frontend&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;good_job&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;vendor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bootstrap&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bootstrap.bundle.min.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;chartjs: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GoodJob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;frontend&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;good_job&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;vendor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;chartjs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;chart.min.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;es_module_shims: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GoodJob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;frontend&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;good_job&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;vendor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;es_module_shims.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;rails_ujs: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GoodJob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;frontend&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;good_job&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;vendor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rails_ujs.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;freeze&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;# Additional JS modules that don&apos;t live in app/frontend/good_job/modules&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;MODULE_OVERRIDES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;application: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GoodJob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;frontend&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;good_job&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;application.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;stimulus: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GoodJob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;frontend&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;good_job&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;vendor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;stimulus.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;freeze&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;js_modules&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@_js_modules&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GoodJob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;frontend&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;good_job&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;modules&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:file?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each_with_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({})&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modules&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;basename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;basename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sym&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;modules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MODULE_OVERRIDES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Necessarly to serve Javascript to the browser&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;skip_after_action&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:verify_same_origin_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;raise: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;before_action&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expires_in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;public: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;static&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;file: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;STATIC_ASSETS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ActionController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RoutingError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Not Found&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;module&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ActionController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RoutingError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Not Found&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;js&quot;&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;file: &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;js_modules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ActionController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RoutingError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Not Found&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One downside of this is that I’m unable to use Sass or Typescript or anything that isn’t vanilla CSS or Javascript. So far I haven’t missed that too much; Bootstrap brings a very comprehensive design system and Rubymine is pretty good at hinting Javscript on its own.&lt;/p&gt;

&lt;p&gt;Another downside is that I package several hundred kilobytes of frontend code within my gem. This increases the gem size, which is a real bummer if an application isn’t mounting the dashboard. I’ve considered separating the optional dashboard into a separate gem, but I’m deferring that until anyone notices that it’s problematic (so far so good!).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Manually link assets and construct a JS importmaps in my Engine’s layout &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Having created the routes and controller actions, I can simply link the static files in the layout html header:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- app/views/layouts/good_job/application.html.erg --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Note:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Do&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;asset&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;helpers&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;avoid&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;paths&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;being&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;overriden&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;config.asset_host&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tag.link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stylesheet&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;frontend_static_path&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;:bootstrap&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;format:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:css&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;GoodJob::VERSION&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;locale:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nonce:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content_security_policy_nonce&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tag.link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stylesheet&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;frontend_static_path&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;:style&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;format:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:css&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;GoodJob::VERSION&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;locale:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nonce:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content_security_policy_nonce&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tag.script&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&quot;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;frontend_static_path&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;:bootstrap&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;format:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:js&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;GoodJob::VERSION&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;locale:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nonce:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content_security_policy_nonce&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tag.script&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&quot;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;frontend_static_path&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;:chartjs&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;format:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:js&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;GoodJob::VERSION&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;locale:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nonce:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content_security_policy_nonce&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tag.script&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&quot;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;frontend_static_path&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;:rails_ujs&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;format:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:js&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;GoodJob::VERSION&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;locale:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nonce:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content_security_policy_nonce&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Beneath this, I manually construct the JSON the browser expects for importmaps:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Link es_module_shims --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tag.script&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&quot;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;frontend_static_path&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;:es_module_shims&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;format:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:js&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;GoodJob::VERSION&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;locale:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;async:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nonce:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content_security_policy_nonce&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Construct the importmaps JSON object --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;importmaps = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;GoodJob::FrontendsController.js_modules.keys.index_with&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;module_name&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;frontend_module_path&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;module_name&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;format:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:js&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;locale:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;GoodJob::VERSION&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tag.script&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;imports:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;importmaps&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;to_json.html_safe&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;importmap&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nonce:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content_security_policy_nonce&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Import the entrypoint: application.js --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tag.script&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&quot;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nonce:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content_security_policy_nonce&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; import &quot;application&quot;; &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;thats-it&quot;&gt;That’s it!&lt;/h3&gt;

&lt;p&gt;I’ll admit, serving frontend assets using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;render file:&lt;/code&gt; is boring, but I experienced a thrill the first time I wired up the importmaps and &lt;em&gt;it just worked&lt;/em&gt;. Writing small Javascript modules and using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import&lt;/code&gt; directives is really nice. I recently added Stimulus and I’m feeling optimistic that I could reliably implement Turbo in my gem’s Rails Engine fully decoupled from the parent application.&lt;/p&gt;

&lt;p&gt;I hope this post about GoodJob inspires you to build full-featured web frontends for your own gems and libraries.&lt;/p&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/03/how-goodjob-s-mountable-rails-engine-delivers-javascript-importmaps-and-frontend-assets&quot;&gt;How GoodJob&apos;s mountable Rails Engine delivers Javascript importmaps and frontend assets&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Mon, 20 Mar 2023 15:27:00 +0000</pubDate>
  <link>https://island94.org/2023/03/how-goodjob-s-mountable-rails-engine-delivers-javascript-importmaps-and-frontend-assets</link>
  <guid isPermaLink="true">https://island94.org/2023/03/how-goodjob-s-mountable-rails-engine-delivers-javascript-importmaps-and-frontend-assets</guid>
  
    <category>GoodJob</category>
  
  
</item>

      
    
      
        




<item>
  <title>Recently, March 12, 2023</title>
  <description>&lt;ul&gt;
  &lt;li&gt;Work has been complicated, recently. &lt;a href=&quot;https://techcrunch.com/2023/02/09/github-lays-off-10-and-goes-fully-remote/&quot;&gt;Layoffs, as a general idea&lt;/a&gt;, were announced a month ago; it was the same week I came down with a bad cold. I’ve been fairly low energy since and have had trouble differentiating the two. I’m supremely proud and confident that my team is doing the most important work possible. We’ll see!&lt;/li&gt;
  &lt;li&gt;The week prior to all of this, my dad came to visit and stay with us. Having an easier time hosting family was one of our goals in getting a 2nd bedroom. Success.&lt;/li&gt;
  &lt;li&gt;Wow, it’s nearly been a year since I left my last job. I’ve had a number of former colleagues asking for help in leaving, in addition to talking with folks being pushed out: I was surprised to see Code for America finally kill Brigades, and really &lt;a href=&quot;https://statescoop.com/code-for-america-local-brigades-ending/&quot;&gt;twist the knife too&lt;/a&gt; by forcing groups to rename themselves.&lt;/li&gt;
  &lt;li&gt;GoodJob is great! I’ve been thinking about &lt;a href=&quot;https://github.com/bensheldon/good_job/discussions/831&quot;&gt;replacing Advisory Locks&lt;/a&gt; with a lock strategy that’s more compatible with PgBouncer. But that will probably be a 2-year project at least of incrementally crabwalking towards that goal while avoiding breaking changes. &lt;a href=&quot;https://github.com/rubygems/rubygems.org/pull/3533&quot;&gt;Rubygems.org just adopted GoodJob&lt;/a&gt;; I am humbled.&lt;/li&gt;
  &lt;li&gt;On other projects, I’ve been trying to lower costs. My S3 data-transfer bill went from $10 to $50 a month, which I’m not happy about; scrapers are the worst 🤷‍♀️ I’ve also been experimenting with Dokku for packing some smaller projects (paying $15 once rather than $12 per app), though the VM locked up once on a Saturday night and I had to reboot it and this is exactly why I don’t want to manage my own servers.&lt;/li&gt;
  &lt;li&gt;My brother and I have been planning a Celebration of Life for my mom.&lt;/li&gt;
  &lt;li&gt;I’m so happy to finally be back on Daylight Savings Time.&lt;/li&gt;
&lt;/ul&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/03/recently-march-12-2023&quot;&gt;Recently, March 12, 2023&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Mon, 13 Mar 2023 00:26:00 +0000</pubDate>
  <link>https://island94.org/2023/03/recently-march-12-2023</link>
  <guid isPermaLink="true">https://island94.org/2023/03/recently-march-12-2023</guid>
  
    <category>weeknotes</category>
  
  
</item>

      
    
      
        




<item>
  <title>Service Object Objects in Ruby</title>
  <description>&lt;p&gt;For anyone that follows me on social media, I’ll sometimes get into a &lt;a href=&quot;https://deprogrammaticaipsum.com/james-coplien/&quot;&gt;Coplien&lt;/a&gt;-esque funk of “I don’t wanna write Classes. I want to write &lt;em&gt;Objects&lt;/em&gt;!”. I don’t want to negotiate an industrial-relations policy for instances of Person in the current scope. I want to imagine the joy and misery Alice and Bob will experience working together right now.&lt;/p&gt;

&lt;p&gt;I was thinking of that recently when &lt;a href=&quot;https://www.reddit.com/r/ruby/comments/10sooyr/comment/j74j5qw/?utm_source=reddit&amp;amp;utm_medium=web2x&amp;amp;context=3&quot;&gt;commenting on Reddit&lt;/a&gt; about Caleb Hearth’s &lt;a href=&quot;https://calebhearth.com/decree&quot;&gt;“The Decree Design Pattern”&lt;/a&gt;. Which ended up in the superset of these two thoughts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;heck yeah! if it’s globally distinct it should be globally referenceable&lt;/li&gt;
  &lt;li&gt;oh, oh no, I don’t like looking at &lt;em&gt;that&lt;/em&gt; particular Ruby code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This was my comment to try to personally come to terms with those thoughts, iteratively:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# a consistent callable&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;my_decree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_something&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# ok, but globally scoped&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;MY_DECREE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_something&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# ok, but without the shouty all-caps&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MyDecree&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;do_something&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# ok, but what about when it gets really complex&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyDecree&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@variable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;variable&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;do_something&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;do_something_else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;do_even_more&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_even_more&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# something really complicated....&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From the outside, &lt;em&gt;object&lt;/em&gt; perspective, these are all have the same interchangeable interface (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.call&lt;/code&gt;), and except for the first one, accessible everywhere. That’s great, from my perspective! Though I guess it’s a pretty short blog post to say:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Decrees are globally discrete and call-able objects&lt;/li&gt;
  &lt;li&gt;The implementation is up to you!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unfortunately, the moment the internals come into play, it gets messy. But I don’t think that should take away from the external perspective.&lt;/p&gt;


  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/02/service-object-objects-in-ruby&quot;&gt;Service Object Objects in Ruby&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Tue, 14 Feb 2023 16:18:00 +0000</pubDate>
  <link>https://island94.org/2023/02/service-object-objects-in-ruby</link>
  <guid isPermaLink="true">https://island94.org/2023/02/service-object-objects-in-ruby</guid>
  
    <category>Ruby</category>
  
  
</item>

      
    
      
        




<item>
  <title>Slop and call</title>
  <description>&lt;p&gt;In my role as Engineering Manager, I frequently play &lt;em&gt;Keeper of the Process&lt;/em&gt;. Having worked effectively alongside plenty of agile &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#noplanning&lt;/code&gt; people (RIP Andrew), and carrying the scars of dysfunctional processes (oh, PRDs and OGSM), it feels historically out of character to lean into OKR scores and target dates. And I think I’ve made my peace with it.&lt;/p&gt;

&lt;p&gt;When I was in high school, my friend’s dad Gary (RIP Gary) retired and bought a championship pool table. The pool table went in their living room and everything else came out. Nothing else fit. The room was a pool table and a stero, which Gary kept tuned to classic jazz. We played a lot of pool and listened to a lot of Charles Mingus.&lt;/p&gt;

&lt;p&gt;The two games I remember playing most was 2-ball “English” and 9-ball. English is a “called” game; you have to say which ball and hole you’re aiming for before making the shot. 9-ball is played “slop”, as long as you hit the lowest-numbered ball first, it doesn’t matter which ball goes into which hole.&lt;/p&gt;

&lt;p&gt;Both games have their techniques. Playing English I got really good at fine ball handling and putting a sidespin on the ball (that’s the “English”) and having a narrow intent. With 9-ball, I learned to do a lot of what we call a “textbook”-shot (I dunno why we gave only this one shot that name; we were 17). The shot was to bounce the ball off of as many alternating rails as possible until the ball eventually walked itself into a pocket. Just slam it really.&lt;/p&gt;

&lt;p&gt;The point is, both of them were ok ways to play. They were just different. It’s fine.&lt;/p&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/02/slop-and-call&quot;&gt;Slop and call&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Mon, 13 Feb 2023 04:34:00 +0000</pubDate>
  <link>https://island94.org/2023/02/slop-and-call</link>
  <guid isPermaLink="true">https://island94.org/2023/02/slop-and-call</guid>
  
  
</item>

      
    
  </channel>
</rss>
