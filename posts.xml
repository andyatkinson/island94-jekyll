<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Island94.org</title>
    <description>A Lost and Found
</description>
    <link>https://island94.org/</link>
    <atom:link href="https://island94.org/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 12 Feb 2023 21:44:00 +0000</pubDate>
    <lastBuildDate>Sun, 12 Feb 2023 21:44:00 +0000</lastBuildDate>
    <generator>Jekyll v4.3.2</generator>
    
    
      




<item>
  <title>Prevent CDN poisoning from Fat GET/HEAD Requests in Ruby on Rails</title>
  <description>&lt;p&gt;There are many different flavors of &lt;a href=&quot;https://portswigger.net/research/web-cache-entanglement&quot;&gt;web cache poisoning discovered by Security Researcher James Kettle&lt;/a&gt;. Read on for an explanation of one I’ve run across…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is a Fat GET/HEAD Request?&lt;/strong&gt; A GET or HEAD request is “fat” when it has a request body. It’s unexpected! Typically one sees a request body with a POST or PUT request because the body contains form data. The HTTP specification says that including a request body with GET or HEAD requests is &lt;a href=&quot;https://stackoverflow.com/a/983458&quot;&gt;&lt;em&gt;undefined&lt;/em&gt;&lt;/a&gt;. You can do it, and it’s up to the application to figure out what that means. Sometimes it’s bad!&lt;/p&gt;

&lt;p&gt;You can get a sense of the applications that intentionally support Fat Requests (and how grumpy it makes some people) by reading through this &lt;a href=&quot;https://github.com/postmanlabs/postman-app-support/issues/131&quot;&gt;Postman issue&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fat Requests can lead to CDN and cache poisoning in Rails.&lt;/strong&gt; CDNs and caching web proxies (like Varnish) are frequently configured to cache the response from a GET or HEAD request based solely on the request’s URL and not the contents of the request body (they don’t cache POSTs or PUTs at all). If an application isn’t deliberately handling the request body, it may cause unexpected content to be cached and served.&lt;/p&gt;

&lt;p&gt;For example, you have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/search&lt;/code&gt; endpoint:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET /search&lt;/code&gt; shows a landing page with some explanatory content&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET /search?q=foo&lt;/code&gt; shows the search results for “foo”.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Here’s what a Fat Request looks like:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  GET /search     &amp;lt;== the url for the landing page

  q=verybadstuff  &amp;lt;== oh, but with a request body
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In a Rails Controller, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parameters&lt;/code&gt; (alias &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;params&lt;/code&gt;) merges query parameters (that’s the URL values) with request parameters (that’s the body values) into a single data structure. If your controller uses the presence of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;params[:q]&lt;/code&gt; to determine whether to show the landing page or the search results, it’s possible that when someone sends that Fat Request, your CDN may cache and subsequently serve the results for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;verybadstuff&lt;/code&gt; every time someone visits the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/search&lt;/code&gt; landing page. That’s bad!&lt;/p&gt;

&lt;p&gt;Here’s how to Curl it:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-XGET&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Content-Type: application/x-www-form-urlencoded&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;q=verybadstuff&quot;&lt;/span&gt; http://localhost:3000/search
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here are 3 ways to fix it…&lt;/p&gt;

&lt;h2 id=&quot;solution-1-fix-at-the-cdn&quot;&gt;Solution #1: Fix at the CDN&lt;/h2&gt;

&lt;p&gt;The most straightforward place to fix this should be at the caching layer, but it’s not always easy.&lt;/p&gt;

&lt;p&gt;With Cloudflare, you could rewrite the GET request’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt; header if it is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application/x-www-form-urlencoded&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;multipart/form-data&lt;/code&gt;. Or use a Cloudflare Worker to drop the request body.&lt;/p&gt;

&lt;p&gt;Varnish makes it easy to drop the request body for any GET request.&lt;/p&gt;

&lt;p&gt;Other CDNs or proxies may be easier or more difficult. It depends!&lt;/p&gt;

&lt;h2 id=&quot;solution-2-deliberately-use-query_parameters&quot;&gt;Solution #2: Deliberately use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;query_parameters&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Rails provides three different methods for accessing parameters:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;query_parameters&lt;/code&gt; for the values in the request URL&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;request_parameters&lt;/code&gt; ) for the values in the request body&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parameters&lt;/code&gt; (alias &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;params&lt;/code&gt;) for the problematic combination of them both. Values in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;query_parameters&lt;/code&gt; take precedence over values in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;request_parameters&lt;/code&gt; when they are merged together.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Developers could be diligent and make sure to only use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;query_parameters&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#index&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#show&lt;/code&gt; , or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get&lt;/code&gt; routed actions. Here’s an example from the &lt;a href=&quot;https://github.com/git/git-scm.com/issues/1551&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git-scm&lt;/code&gt; project&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;solution-3-patch-rails&quot;&gt;Solution #3: Patch Rails&lt;/h2&gt;

&lt;p&gt;Changes were &lt;a href=&quot;https://github.com/rails/rails/issues/39974&quot;&gt;proposed in Rails&lt;/a&gt; to not have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parameters&lt;/code&gt; merge in the body values for GET and HEAD requests; it was rejected because it’s more a problem with the upstream cache than it is with Rails.&lt;/p&gt;

&lt;p&gt;You can patch your own version of Rails. Here’s an example that patches the method in &lt;a href=&quot;https://github.com/rails/rails/blob/21a3b52ba0b7d94b4903e02b6ac537a7d1d1c817/actionpack/lib/action_dispatch/http/parameters.rb#L49-L63&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActionDispatch::Request&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# config/initializers/sanitize_fat_requests.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SanitizeFatRequests&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parameters&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;action_dispatch.request.parameters&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head?&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query_parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dup&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;merge!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path_parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;set_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;action_dispatch.request.parameters&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:params&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:parameters&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;ActionDispatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SanitizeFatRequests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Some RSpec tests to verify this&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;rails_helper&apos;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SanitizeFatRequests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;type: :request&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;does not merge body params in GET requests&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/search&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;headers: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;CONTENT_TYPE&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;application/x-www-form-urlencoded&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;env: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;rack.input&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;StringIO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;q=verybadstuff&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# verify that the request is correctly shaped because&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# the test helpers don&apos;t expect this kind of request&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;request_parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;q&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;verybadstuff&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;action&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;panlexicon&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;controller&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;search&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# the behavioral expectation &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;not_to&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;verybadstuff&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;


  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/02/prevent-cdn-poisoning-from-fat-get-head-requests-in-ruby-on-rails&quot;&gt;Prevent CDN poisoning from Fat GET/HEAD Requests in Ruby on Rails&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Sun, 12 Feb 2023 20:32:00 +0000</pubDate>
  <link>https://island94.org/2023/02/prevent-cdn-poisoning-from-fat-get-head-requests-in-ruby-on-rails</link>
  <guid isPermaLink="true">https://island94.org/2023/02/prevent-cdn-poisoning-from-fat-get-head-requests-in-ruby-on-rails</guid>
  
    <category>rails</category>
  
  
</item>

    
      




<item>
  <title>Introducing GoodJob Bulk and Batch</title>
  <description>&lt;p&gt;GoodJob is a multithreaded, Postgres-based, ActiveJob backend for Ruby on Rails. I recently released two new features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GoodJob::Bulk&lt;/code&gt; to optimize enqueuing large numbers of jobs (released in GoodJob v3.9)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GoodJob::Batch&lt;/code&gt; to coordinate parallelized sets of jobs (released in GoodJob v3.10)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Big thanks to @julik, @mollerhoj, @v2kovac, @danielwestendorf, @jrochkind, @mperham and others for your help and counsel!&lt;/p&gt;

&lt;h3 id=&quot;bulk-enqueue&quot;&gt;Bulk enqueue&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bensheldon/good_job#bulk-enqueue&quot;&gt;GoodJob’s Bulk-enqueue functionality&lt;/a&gt; can buffer and enqueue multiple jobs at once, using a single INSERT statement. This can be more performant when enqueuing a large number of jobs.&lt;/p&gt;

&lt;p&gt;I was inspired by a discussion within a Rails pull request to implement &lt;a href=&quot;https://github.com/rails/rails/pull/46603&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;perform_all_later&lt;/code&gt; within Active Job&lt;/a&gt;. I wanted to both support the way most people enqueue Active Job jobs with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;perform_later&lt;/code&gt; and also &lt;a href=&quot;https://github.com/rails/rails/pull/43434&quot;&gt;encourage people to work directly with Active Job instances too&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# perform_later within a block&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;active_jobs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GoodJob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Bulk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enqueue&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;MyJob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform_later&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;AnotherJob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform_later&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# or with Active Job instances&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;active_jobs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MyJob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AnotherJob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;GoodJob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Bulk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;active_jobs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Releasing Bulk functionality was a two-step: I initially implemented it while working on Batch functionality, and then with @julik’s initiative and help, we extracted and polished it to be used on its own.&lt;/p&gt;

&lt;h3 id=&quot;batches&quot;&gt;Batches&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bensheldon/good_job#batches&quot;&gt;GoodJob’s Batch functionality&lt;/a&gt; coordinates parallelized sets of jobs. The ability to coordinate a set of jobs, and run callbacks during lifecycle events, has been a highly demanded feature. Most people who talked to me about job batches were familiar with &lt;a href=&quot;https://sidekiq.org/products/pro.html&quot;&gt;Sidekiq Pro&lt;/a&gt; ‘s &lt;a href=&quot;https://github.com/mperham/sidekiq/wiki/Batches]&quot;&gt;batch functionality&lt;/a&gt;, which I didn’t want to simply recreate (Sidekiq Pro is excellent!). So I’ve been collecting use cases and thinking about what’s most in the spirit of Rails, Active Job, and Postgres:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Batches are mutable, database-backed objects with foreign-key relationships to sets of job records.&lt;/li&gt;
  &lt;li&gt;Batches have  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;properties&lt;/code&gt; which use Active Job’s serializer, so they can contain and rehydrate any GlobalID object, like Active Record models.&lt;/li&gt;
  &lt;li&gt;Batches have callbacks, which are themselves Active Job jobs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s a simple example:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;GoodJob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Batch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;on_finish: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MyBatchCallbackJob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;user: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;MyJob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform_later&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;OtherJob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform_later&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# When these jobs have finished, it will enqueue your `MyBatchCallbackJob.perform_later(batch, options)`&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyBatchCallbackJob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationJob&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Callback jobs must accept a `batch` and `params` argument&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;batch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# The batch object will contain the Batch&apos;s properties, which are mutable&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;batch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &amp;lt;User id: 1, ...&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Params is a hash containing additional context (more may be added in the future)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; :finish, :success, :discard&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There’s more depth and examples in the &lt;a href=&quot;https://github.com/bensheldon/good_job#batches&quot;&gt;GoodJob Batch documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;please-help&quot;&gt;Please help!&lt;/h3&gt;

&lt;p&gt;Batches are definitely a work in progress, and I’d love your feedback:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What is the Batch functionality missing? Tell me your use cases.&lt;/li&gt;
  &lt;li&gt;Help improve the &lt;a href=&quot;https://goodjob-demo.herokuapp.com/good_job/jobs&quot;&gt;Web Dashboard UI&lt;/a&gt; (it’s rough but functional!)&lt;/li&gt;
  &lt;li&gt;Find bugs! I’m sure there are some edge cases I overlooked.&lt;/li&gt;
&lt;/ul&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/02/introducing-goodjob-bulk-and-batch&quot;&gt;Introducing GoodJob Bulk and Batch&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Sun, 05 Feb 2023 22:37:00 +0000</pubDate>
  <link>https://island94.org/2023/02/introducing-goodjob-bulk-and-batch</link>
  <guid isPermaLink="true">https://island94.org/2023/02/introducing-goodjob-bulk-and-batch</guid>
  
    <category>GoodJob</category>
  
  
</item>

    
      




<item>
  <title>Framing open source contributions at work</title>
  <description>&lt;p&gt;Excerpts from the excellent RailsConf 2022 keynote: &lt;a href=&quot;https://www.youtube.com/watch?v=MbqJzACF-54&quot;&gt;The Success of Ruby on Rails by Eileen Uchitelle&lt;/a&gt; [reformatted from the transcript]:&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;Upgrading is one of the easiest ways to find an area of Rails that can benefit from your contributions.  Fixing an issue in a recent release has a high likelihood of being merged.&lt;/p&gt;

  &lt;p&gt;Running off Rails Main is another way to find contributions to Rails.  If you don’t want to run your Main in production,   you could run it in a separate CI build.  Shopify, GitHub and Basecamp run it.&lt;/p&gt;

  &lt;p&gt;Running off Main may be harder than running off a release because features and bug fixes are  a little in flux sometimes. If you are running  off of Main, a feature added to the Main branch could be removed without deprecation. This is a worthwhile risk to take on because it lowers the overall risk of an upgrade.  When you run off Main, you’re less likely to fall behind upgrading because it becomes  part of your weekly or monthly maintenance.  Upgrading becomes routine, second nature rather  than novel and scary. Changes are easy to isolate. It’s just slightly less polished. Like I  said, I still think it’s pretty stable.&lt;/p&gt;

  &lt;p&gt;Another way to find places to contribute  is look at your own applications.&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Do you have monkey patches on Rails code  that are fixes bugs or changing behavior?   Instead of leaving them there, upstream  the fix and delete the monkey patch.&lt;/li&gt;
    &lt;li&gt;Is there infrastructure level code that  doesn’t really pertain to your product? It’s possible this could be a great addition to  Rails. When I wrote the database in Rails, it came from GitHub’s monolith. It made perfect sense  because it was getting in the way of upgrades, didn’t expose any intellectual property, had  nothing to do with your product features and&lt;br /&gt;
something many applications could benefit from.&lt;/li&gt;
    &lt;li&gt;Lastly and most importantly, keep showing up.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;… Ultimately,  if more companies treated the framework as an extension of the application, it would  result in higher resilience and stability. Investment in Rails ensures your foundation will not crumble under the weight of your application. Treating it as an unimportant part of your application is a mistake and many, many leaders make this mistake.&lt;/p&gt;

  &lt;p&gt;…leaders see funding open source risky is because they don’t actually  understand the work. … Often, leaders worry if there’s a team working in open source, other teams are going to be jealous or resentful that that team is doing “fun” work. …&lt;/p&gt;

  &lt;p&gt;Maintainers need to make changes, deal with security incidents and also handle criticism from many people. Maintaining and contributing to open source requires a different skill set than product work. That doesn’t make it any less essential.&lt;/p&gt;

  &lt;p&gt;…Many product companies don’t like words like “research” and “experimental.”  They can imply work without goals. Use words like  “investment.” And demonstrate the direct value will bring. Make sure it is measurable and will  make the application and product more successful. A great example of measurable work is  a change that improves performance. If you can tie contributions to direct customer improvements, it’s easier to show leadership.&lt;/p&gt;

  &lt;p&gt;…As I started contributing more and more  and pealing back the layers of Rails, the impact is limitless. I started looking at how applications stretched  the boundaries of what Rails was meant to do.&lt;/p&gt;

  &lt;p&gt;…Ultimately, I want you to contribute to Rails because it’s going to enable you to build a better company and product. The benefits of investing in Rails go far beyond improving the framework.&lt;/p&gt;

  &lt;p&gt;Investing in Rails will build up the skills of your engineering team. They will developer better communication skills, learn to navigate criticism,  debugging skills and how the framework functions.  It will teach engineers about the inner-workings and catch bugs.&lt;/p&gt;

  &lt;p&gt;Monkey patching is far more dangerous than I think most realize. They break  with upgrades and cause security incidents.  When you write a monkey patch, you maintain a portion of Rails code. Wouldn’t it have been   better to patch it upstream rather than taking on that risk and responsibility.&lt;/p&gt;

  &lt;p&gt;It will give your engineering team the skills  they need to make better technical decisions. You’re ensuring that Rails benefits your application and the company for the long-term.&lt;/p&gt;

  &lt;p&gt;…Contributing to Rails is only &lt;em&gt;not&lt;/em&gt; essential if you don’t care about the direction the framework is headed in. We should be contributing  because we care about the changes.&lt;/p&gt;

  &lt;p&gt;We want to ensure our apps are upgradeable, performant and stable.&lt;/p&gt;

  &lt;p&gt;Investment in Rails also means you won’t have to rewrite your application in a few years because Rails no longer supports what you need. When you fail  to invest in your tools, you end up being unable to upgrade. Your engineering team is miserable. The codebase is a mess and writing features is impossible. You’re forced into a rewrite, your engineers want to write Rails and you can no longer let them do that. You have to build a bunch of features before you site falls over.&lt;/p&gt;

  &lt;p&gt;It’s not Rails’ fault you made  the decision to invest elsewhere.&lt;/p&gt;

  &lt;p&gt;If you build contributing into your culture, the benefits are clear:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Your engineering teams’ skills will improve.&lt;/li&gt;
    &lt;li&gt;Rails will evolve with your  application because you’re helping decide how it needs to change.&lt;/li&gt;
    &lt;li&gt;Your application will be  more resilient because there’s low tech debt and your foundation is stable. Active investment  prevents your application from degrading.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;Building a team to invest in Rails is  proactive. Rewriting an application is reactive. Which one do you think is better for business in the long run?&lt;/p&gt;

&lt;/blockquote&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/01/framing-open-source-contributions-at-work&quot;&gt;Framing open source contributions at work&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Fri, 27 Jan 2023 00:51:00 +0000</pubDate>
  <link>https://island94.org/2023/01/framing-open-source-contributions-at-work</link>
  <guid isPermaLink="true">https://island94.org/2023/01/framing-open-source-contributions-at-work</guid>
  
  
</item>

    
      




<item>
  <title>How GoodJob&apos;s Cron does distributed locks</title>
  <description>&lt;p&gt;&lt;a href=&quot;https://github.com/bensheldon/good_job&quot;&gt;GoodJob&lt;/a&gt; is a multithreaded, Postgres-based, ActiveJob backend for Ruby on Rails. GoodJob has many features that take it beyond ActiveJob. One such feature is &lt;a href=&quot;https://github.com/bensheldon/good_job/blob/994ecff5323bf0337e10464841128fda100750e6/README.md#cron-style-repeatingrecurring-jobs&quot;&gt;cron-like functionality&lt;/a&gt; that allows scheduling repeated jobs on a fixed schedule.&lt;/p&gt;

&lt;p&gt;This post is a brief technical story of how GoodJob prevents duplicated cron jobs from running in a multi-process, distributed environment.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is all true as of GoodJob’s current version, 3.7.4.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;briefly-how-goodjobs-cron-works&quot;&gt;Briefly, how GoodJob’s cron works&lt;/h3&gt;

&lt;p&gt;GoodJob heavily leans on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Concurrent::Ruby&lt;/code&gt; high-level primitives, and the cron implementation is no different. &lt;a href=&quot;https://github.com/bensheldon/good_job/blob/994ecff5323bf0337e10464841128fda100750e6/lib/good_job/cron_manager.rb&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GoodJob::CronManager&lt;/code&gt;&lt;/a&gt; accepts a fixed hash of schedule configuration and feeds them into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Concurrent::ScheduledTask&lt;/code&gt;s, which then trigger &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;perform_later&lt;/code&gt; on the job classes at the prescribed times.&lt;/p&gt;

&lt;p&gt;A locking strategy is necessary. GoodJob can be running across multiple processes, across numerous isolated servers or containers, in one application. GoodJob should guarantee that at the scheduled time, only a single scheduled job is enqueued.&lt;/p&gt;

&lt;h3 id=&quot;initially-advisory-locks&quot;&gt;Initially, advisory locks&lt;/h3&gt;

&lt;p&gt;When &lt;a href=&quot;https://github.com/bensheldon/good_job/pull/297&quot;&gt;GoodJob’s cron feature was first introduced in version 1.12&lt;/a&gt;, Cron used an existing feature of GoodJob: &lt;a href=&quot;https://github.com/bensheldon/good_job/blob/994ecff5323bf0337e10464841128fda100750e6/README.md#activejob-concurrency&quot;&gt;Concurrency Control&lt;/a&gt;. Concurrency Control places limits on how many jobs can be enqueued or performed at the same time.&lt;/p&gt;

&lt;p&gt;Concurrency Control works by assigning jobs a “key” which is simply a queryable string. Before enqueuing jobs, GoodJob will count how many job records already exist with that same key and prevent the action if the count exceeds the configured limit. GoodJob uses advisory locks to avoid race conditions during this accounting phase.&lt;/p&gt;

&lt;p&gt;There were some downsides to using Concurrency Control for Cron.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It was a burden on developers. Concurrency Control extends &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActiveJob::Base&lt;/code&gt; and required the developer to configure Concurrency Control rules separately from the Cron configuration.&lt;/li&gt;
  &lt;li&gt;It wasn’t very performant. Concurrency Control’s design is &lt;em&gt;optimistic&lt;/em&gt; and works best when collisions are rare or infrequent. But a large, clock-synchronized formation of GoodJob processes is a &lt;em&gt;pessimistic&lt;/em&gt; concurrency scenario, and it could take several seconds of advisory locking and unlocking across all the processes to insert a single job.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;then-a-unique-index&quot;&gt;Then, a unique index&lt;/h3&gt;

&lt;p&gt;GoodJob v2.5.0 &lt;a href=&quot;https://github.com/bensheldon/good_job/pull/423&quot;&gt;changed the cron locking strategy&lt;/a&gt;. Instead of using Concurrency Control’s advisory locks, GoodJob uses a unique compound index to prevent the same cron job from being enqueued/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INSERT&lt;/code&gt;ed into the database multiple times.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In addition to the existing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cron_key&lt;/code&gt; column in job records, the change added a new timestamp column, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cron_at&lt;/code&gt; to  store when the cron job is enqueued.&lt;/li&gt;
  &lt;li&gt;Added a unique index on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[cron_key, cron_at]&lt;/code&gt; to ensure that only one job is inserted for the given key and time.&lt;/li&gt;
  &lt;li&gt;Handled the expected &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActiveRecord::RecordNotUnique&lt;/code&gt; when multiple cron processes try to enqueue the same cron job simultaneously and the unique index prevents the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INSERT&lt;/code&gt; from taking place&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, when a thundering herd of GoodJob processes tries to enqueue the same cron job at the same time, the database uses its unique index constraint to prevent multiple job records from being created. Great!&lt;/p&gt;

&lt;h3 id=&quot;does-it-do-a-good-job&quot;&gt;Does it do a good job?&lt;/h3&gt;

&lt;p&gt;Yes! I’ve received lots of positive feedback in the year+ since GoodJob’s cron moved to a unique index locking strategy. From the application perspective, there’s much less enqueueing latency using a unique index than when using advisory locks. And from the developer’s perspective, it does &lt;em&gt;just work&lt;/em&gt; without additional configuration beyond the schedule.&lt;/p&gt;

&lt;p&gt;Using a unique index does require preserving the job records for a bit after the jobs have been performed. Otherwise, poor clock synchronization across processes could lead to a duplicate job being inserted again if the job has already been performed and removed from the table/index. Fortunately, preserving job records should not be too burdensome because GoodJob will &lt;a href=&quot;https://github.com/bensheldon/good_job/blob/994ecff5323bf0337e10464841128fda100750e6/README.md#monitor-and-preserve-worked-jobs&quot;&gt;automatically clean them up&lt;/a&gt; too.&lt;/p&gt;

&lt;p&gt;Lastly, one goal of writing this is the hope/fear that a Database Administrator will tell me this is a terrible strategy and provide a better one. Until that happens, I have confidence GoodJob’s cron is good. &lt;a href=&quot;https://github.com/bensheldon/good_job/discussions/806&quot;&gt;I’d love your feedback!&lt;/a&gt;&lt;/p&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/01/how-goodjob-s-cron-does-distributed-locks&quot;&gt;How GoodJob&apos;s Cron does distributed locks&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Sun, 22 Jan 2023 18:18:00 +0000</pubDate>
  <link>https://island94.org/2023/01/how-goodjob-s-cron-does-distributed-locks</link>
  <guid isPermaLink="true">https://island94.org/2023/01/how-goodjob-s-cron-does-distributed-locks</guid>
  
    <category>GoodJob</category>
  
  
</item>

    
      




<item>
  <title>Conflict, at work</title>
  <description>&lt;ul&gt;
  &lt;li&gt;I had a conversation with a coworker that reminded me (again!) of this &lt;a href=&quot;https://island94.org/2022/03/over-rapported&quot;&gt;Foreign Affairs essay&lt;/a&gt;. It was about receiving feedback that seemed to focus on minimizing interpersonal conflict over things like achieving goals and strategy and impact; it felt familiar.&lt;/li&gt;
  &lt;li&gt;I’ve had coworkers and executives in other jobs that were like “people need to be more comfortable with conflict”. I’ve also been screamed at in a postmortem at a different job. So like, my feelings are mixed. Like are we talking about the absence of psychological safety, or too much of it? I dunno, I could never draw out specifics. I’m now thinking it was actually about the previous bullet point.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://island94.org/2022/02/it-asks-you-to-be-interactive&quot;&gt;Schulman&lt;/a&gt; makes the point that you’re either in a relationship with someone, or you aren’t.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I read this &lt;a href=&quot;https://harpers.org/archive/2023/01/exit-technologists-libertarianism/&quot;&gt;Harper’s essay about working at Wired UK&lt;/a&gt; by Hari Kunzru with the line:&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;The political economist Albert O. Hirschman famously characterized the choice that is faced by people within declining institutions as being between “voice” and “exit.” Either you speak up to change things, or you leave and look for something better.’&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Which led me to find &lt;a href=&quot;https://www.robkhenderson.com/past-newsletter/exit-voice-and-loyalty-a-review&quot;&gt;this essay about the book&lt;/a&gt; which pulls this lovely quote from Hirschman:&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;The ultimate in unhappiness and paradoxical loyalist behavior occurs when the public evil produced by the organization promises to accelerate or to reach some intolerable level as the organization deteriorates; then…the decision to exit will become ever more difficult the longer one fails to exit. The conviction that one has to stay on to prevent the worst grows all the time.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;But this is maybe now more about disfunction than exit. But I’ve also been in the position of being in difficult conflict when explaining that a certain set of strategies will lead to difficulties in attracting and retaining talent. And then most of my favorite people were gone. And then so was I.&lt;/li&gt;
&lt;/ul&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/01/conflict-at-work&quot;&gt;Conflict, at work&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Wed, 04 Jan 2023 05:17:00 +0000</pubDate>
  <link>https://island94.org/2023/01/conflict-at-work</link>
  <guid isPermaLink="true">https://island94.org/2023/01/conflict-at-work</guid>
  
  
</item>

    
      




<item>
  <title>2022 in review</title>
  <description>&lt;ul&gt;
  &lt;li&gt;Family: My mom passed away; first parent to go. Of a plus, we spent a lot of time with my brother and his young family. We had to cancel a big family trip to Europe, but hope to make up with a trip in 2023.&lt;/li&gt;
  &lt;li&gt;Community: Turned 40 this year; celebrated 11 years in SF; coming up on 3 years on Nob Hill. Things feel good. We were approved as a foster/adopt Resource Family, but with everything that happened with my mom, we haven’t yet begun hosting children yet. I’m going into year three of strategic planning committee at St. Francis.&lt;/li&gt;
  &lt;li&gt;Work: Started at GitHub after five years at Code for America. Still feels a bit like a dream that I get to continue to do what I want technically (Ruby and Rails) while also working with good people. I’ve continued to work with my leadership coach, which has been nice continuity.&lt;/li&gt;
  &lt;li&gt;Projects &amp;amp; Consulting: It’s now been 10 years since I registered as a small business in SF, which I did when I first started earning money with Day of the Shirt and doing various consulting jobs. GoodJob is floating along, and become a small source of GitHub Sponsors funds. The other constellation of projects continued in maintenance: Brompt, Panlexicon, etc.&lt;/li&gt;
&lt;/ul&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/01/2022-in-review&quot;&gt;2022 in review&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Tue, 03 Jan 2023 01:19:00 +0000</pubDate>
  <link>https://island94.org/2023/01/2022-in-review</link>
  <guid isPermaLink="true">https://island94.org/2023/01/2022-in-review</guid>
  
  
</item>

    
      




<item>
  <title>Liberatory accountability</title>
  <description>&lt;p&gt;From Lee Shevek’s &lt;a href=&quot;https://theanarchistlibrary.org/library/lee-shevek-is-punishment-carceral-logic&quot;&gt;“Is Punishment ‘Carceral Logic’?”&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;…the difference between carceral logic and liberatory accountability is not the presence/lack of punishment. Rather, the difference lies in how much power the person who has done harm has. Carceral logic aims to strip them of their personal power, while liberatory accountability processes require that they take ownership of that power. That is, ultimately, what accountability is: taking responsibility for your power as well as for the consequences of your use of it. Recognizing your own agency in having made a choice that resulted in harm, facing the people you hurt, giving them answers and apologies, and claiming your ability to do differently. This is what the carceral system does not allow. It strips people entirely of their agency, requires of them no meaningful repair process, and locks them in a cell where they are ritualistically abused by the State. This is a process that heals no one, nor was it ever even intended for healing or repair. It is a system only of control.&lt;/p&gt;

  &lt;p&gt;Liberatory accountability processes, on the other hand, demand something incredibly difficult for people who do harm: acknowledgement of their own power, their own responsibility to the harm they do with that power and their obligation to use that same power to make amends. Taking that responsibility also means acknowledging and respecting the consequences for the harm they do. If I truly take a harm I’ve done seriously, if I genuinely see it as harm, then I also will respect that the person I harmed may need to put more boundaries up between us to feel safe again. If the harm is more extreme, I will see the steps the surrounding community takes (closing my access to certain spaces, demanding my participation in ongoing accountability processes, etc.) as important responses to re-establish safety where my actions ruptured it, even if those responses are painful or uncomfortable to me. Absent of these consequences, the people most adept at doing harm while maintaining community support have free reign to continue perpetuating cycles of harm that will reverberate through years (often generations) to come, and survivors flee into solitude because there are no communal norms in place to provide them any real or trustworthy sense of safety. This is, in fact, the status quo of the world we live in now.&lt;/p&gt;

  &lt;p&gt;The real distinction between carceral logic and liberatory accountability is that one process violently strips someone of their humanity and agency, while the other demands that people who do harm take full command of their humanity and agency to atone for that harm and become better members of the community in the process. The carceral system says: “You are a criminal and you deserve to be subject to constant harm and control because of it.” Liberatory accountability says: “You are a person who chose to do harm, we believe in your capacity to choose to face the consequences of that harm and do what you can to repair it.”&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;This reminded me of SorryWatch’s &lt;a href=&quot;https://sorrywatch.com/how-to-apologize-a-short-checklist/&quot;&gt;“How to apologize: a short checklist”&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;APOLOGIZE – Say “I’m sorry” or “I apologize.” Take responsibility. Talk about what you did, not just “what happened.” Avoid “if,” “regret,” and “it’s unfortunate.” Try “I shouldn’t have done that,” “That was rude of me,” or “It was wrong.”&lt;/p&gt;

  &lt;p&gt;TO THEM – Not just to the twitmosphere, but to the person harmed.&lt;/p&gt;

  &lt;p&gt;FOR WHAT YOU DID – Be specific. Not “hurting you” but, for example, “calling you a slimy swivel-eyed creep.”&lt;/p&gt;

  &lt;p&gt;ACKNOWLEDGE THE EFFECT – If you know it. “I embarrassed you by calling you a slimy swivel-eyed creep in front of everybody at our dinner table, and at the nearby tables.”&lt;/p&gt;

  &lt;p&gt;EXPLAIN, BUT DON’T EXCUSE – “I called you a slimy swivel-eyed creep to try to make you be quiet because I didn’t want to be thrown out before dessert came. I was a jerk.”&lt;/p&gt;

  &lt;p&gt;STOP TALKING AND LET THEM HAVE THEIR SAY – “I wasn’t upset that you called me a slimy swivel-eyed creep. I was upset that you interrupted my song. It made me feel like you don’t respect me as an artist.”&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;And accountability (giving an account) fits into themes in Sarah Schulman’s &lt;em&gt;Conflict is Not Abuse&lt;/em&gt;, which I’ll &lt;a href=&quot;https://island94.org/2022/02/it-asks-you-to-be-interactive&quot;&gt;requote&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;… everyone deserves help when they reach out for it. …the collapse of Conflict and Abuse is partly the result of a punitive standard in which people are made desperate, yet ineligible, for compassion. … people who have suffered in the past, or find themselves implicated in situations in which they are afraid to be accountable, fear that within their group acknowledging some responsibility will mean being denied their need to be heard and cared for.&lt;/p&gt;
&lt;/blockquote&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2022/12/liberatory-accountability&quot;&gt;Liberatory accountability&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Thu, 01 Dec 2022 01:50:00 +0000</pubDate>
  <link>https://island94.org/2022/12/liberatory-accountability</link>
  <guid isPermaLink="true">https://island94.org/2022/12/liberatory-accountability</guid>
  
  
</item>

    
      




<item>
  <title>Environment, at work</title>
  <description>&lt;p&gt;&lt;img src=&quot;/uploads/2022-11/simearth-daisyworld.png&quot; alt=&quot;Screenshot of Sim Earth&apos;s Daisyworld&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;gaia&quot;&gt;Gaia&lt;/h2&gt;

&lt;p&gt;I played a lot of Sim Earth as a kid. It had a mode called Daisyworld based on the &lt;a href=&quot;https://en.wikipedia.org/wiki/Gaia_hypothesis&quot;&gt;“Gaia Hypothesis”&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;proposes that living organisms interact with their inorganic surroundings on  Earth to form a synergistic and self-regulating, complex system that helps to maintain and perpetuate the conditions for life on the planet.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In Sim Earth’s Daisyworld, that was simulated by populating the Earth with different shades of flower. Darker flowers survived at lower temperatures and absorbed sunlight, warming their immediate environment; lighter flowers survived at warmer temperatures and reflecting sunlight, cooling their immediate environment. Running the simulation would, eventually, usually, lead to a dynamically changing, but still steady-state environment; in &lt;a href=&quot;https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life#Examples_of_patterns&quot;&gt;Conway terminoloy&lt;/a&gt;: still lifes and oscillators.&lt;/p&gt;

&lt;p&gt;Usually your Earth found a steady state, unless:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;geographical barriers prevented regulating changes from spreading, like mountain ranges or island archipelagos; or&lt;/li&gt;
  &lt;li&gt;disasters like volcanoes or meteors significantly disrupted the environment before the flowers could adapt and moderate it; or&lt;/li&gt;
  &lt;li&gt;you plopped some bunnies or herbivores that ate the flowers, because the Gaia mode didn’t lock-out the other Sim Earth tools. Sandboxes!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Usually your Earth found and could recover a steady state! That’s &lt;a href=&quot;https://en.wikipedia.org/wiki/Homeostasis&quot;&gt;homeostasis&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Homeostasis is brought about by a natural resistance to change when already in the optimal conditions, and equilibrium is maintained by many regulatory mechanisms: it is thought to be the central motivation for all organic action.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;terroir&quot;&gt;Terroir&lt;/h2&gt;
&lt;p&gt;From Vicki Boykis’s  &lt;a href=&quot;https://vicki.substack.com/p/the-art-of-the-long-goodbye&quot;&gt;“The Art of the Long Goodbye”&lt;/a&gt; :&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A few years ago, I read the Southern Reach trilogy, by Jeff Van Der Meer….&lt;/p&gt;

  &lt;p&gt;One of the main concepts of the books is the idea of a terroir, a self-contained natural environment that shapes everything inside of it. Usually when we talk about a terroir we’re referring to wine: a wine from a given region tastes like wine from that given region should taste because of the grapes and the soil and the way the sunlight hits that particular spot. Since I left my last job, I’ve been thinking a lot about the idea of terroir as it relates to the workplace.&lt;/p&gt;

  &lt;p&gt;Every workplace, like every Tolstoyan family, is unique in its own way. When we start a job, we enter that terroir with the intent to shape it. But in turn, we are also shaped by it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;landrace&quot;&gt;Landrace&lt;/h2&gt;

&lt;p&gt;A &lt;a href=&quot;https://en.wikipedia.org/wiki/Landrace&quot;&gt;landrace&lt;/a&gt; is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;a domesticated, locally adapted, traditional variety of a species of animal or plant that has developed over time, through adaptation to its natural and cultural environment of agriculture and pastoralism, and due to isolation from other populations of the species.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As I’m now in the land of big companies, it’s very common to hear someone described as “from Amazon” or “from Microsoft” and like, I know what they mean!&lt;/p&gt;

&lt;p&gt;One of my challenges as an engineering leader during the pandemic was this: how much do we adapt our values and practices to be inclusive to the current fucked-all-over situation while preserving what made us, as an engineering organization, us. I think my results were mixed.&lt;/p&gt;

&lt;p&gt;An example: pair programming. We were a lot of people from Pivotal labs (there it is!) with a strong belief in Extreme Programming: shared ownership, an active-closeness to the users of our software, and closeness to each other through frequent pair programming. And we went from largely in-person pairing, to remote pairing. I find pair programming to be exhausting in the best of circumstances, and the ongoing pandemic didn’t help. So we adapted our values and practices, and de-emphasized pairing and went from an expectation of “most of the time” to “a tool that’s available some of the time”. It was a stretch (aide: it wasn’t just pairing that got stretched either, the whole XP thing)&lt;/p&gt;

&lt;p&gt;A team is never static. People were leaving, we were hiring, teams were forming and reforming. It was tenuous for everyone, to test out the limits of inclusion and identity. And as an engineering leader, it led to a lot of tough conversations about  &lt;em&gt;how… we… work… together&lt;/em&gt;. It was hard; I think we lost that cultivar.&lt;/p&gt;

&lt;h2 id=&quot;oasis&quot;&gt;Oasis&lt;/h2&gt;

&lt;p&gt;Will Larson writes about this idea of a &lt;a href=&quot;https://lethain.com/values-oasis/&quot;&gt;“Values Oasis”&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A few years ago, I heard an apocryphal story about Sheryl Sandberg’s departure from Google to Facebook. In the story she apologizes to her team at Google because she’d sheltered them too much from Google’s politics and hadn’t prepared them to succeed once she stopped running interference. The story ends with her entire team struggling and eventually leaving after her departure. I don’t know if the story is true, but it’s an excellent summary of the Values Oasis trap, where a leader uses their personal capital to create a non-conforming environment within an wider organization.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;garden&quot;&gt;Garden&lt;/h2&gt;

&lt;p&gt;The relationship between people and environment is a problematic metaphor.&lt;/p&gt;

&lt;p&gt;I was a member of the Boston Pubic Garden’s Rose Brigade for number of years, taking care of the roses. The Boston Public Garden’s style is Western, specimen, ornamental: large, well-spaced bushes with well-defined blooms. They’re gorgeous. And.&lt;/p&gt;

&lt;p&gt;There’s a lot of waste. Trimming, dead-heading, opening up, clearing leaf drops. A lot of waste.&lt;/p&gt;

&lt;p&gt;There is a trope, &lt;a href=&quot;https://tvtropes.org/pmwiki/pmwiki.php/Main/Cincinnatus&quot;&gt;Cincinnatus&lt;/a&gt;, in which the tyrant/general/magnate retires (or desires to retire, after the present crisis, of course) to tend garden. I think it usually appears to soften them: &lt;em&gt;see they can be gentle too.&lt;/em&gt; But I dunno, gardens aren’t gentle. There’s a lot of centering the gardener, and a lot of will to be exercised in a garden. Other people aren’t plants, don’t take it too far.&lt;/p&gt;

&lt;p&gt;I’m reminded of Nirgal’s (spoiler!) fated ecopoetic basin in KSR’s &lt;a href=&quot;https://www.goodreads.com/book/show/77504.Blue_Mars&quot;&gt;&lt;em&gt;Blue Mars&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Nirgal wandered the basin after storms, looking to see what had blown in. Usually it was only a load of icy dust, but once he found an unplanted clutch of pale blue Jacob’s ladders, tucked between the splits in a breadloaf rock. Check the botanicals to see how it might interact with what was already there. Ten percent of introduced species survived, then ten percent of those became pests; that was invasion biology’s ten-ten rule, Yoshi said, almost the first rule of the discipline. “Ten meaning five to twenty of course.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And close on it out with a quote from &lt;a href=&quot;https://www.goodreads.com/book/show/20186.Seeing_Like_a_State&quot;&gt;&lt;em&gt;Seeing like a State&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Contemporary development schemes… require the creation of state spaces where the government can reconfigure the society and economy of those who are to be “developed.” The transformation of peripheral nonstate spaces into state spaces by the modern, developmentalist nation-state is ubiquitous and, for the inhabitants of such spaces, frequently traumatic.&lt;/p&gt;
&lt;/blockquote&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2022/11/environment-at-work&quot;&gt;Environment, at work&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Wed, 16 Nov 2022 20:14:00 +0000</pubDate>
  <link>https://island94.org/2022/11/environment-at-work</link>
  <guid isPermaLink="true">https://island94.org/2022/11/environment-at-work</guid>
  
    <category>terroir</category>
  
    <category>work</category>
  
  
</item>

    
      




<item>
  <title>Worknotes: November 13, 2022</title>
  <description>&lt;p&gt;Let’s go!&lt;/p&gt;

&lt;h2 id=&quot;universe&quot;&gt;Universe&lt;/h2&gt;

&lt;p&gt;This past week was GitHub Universe. Local SF Hubbers were invited to volunteer and I did: I worked the info booth and the swag shop. It was nice meeting lots of other local Hubbers that don’t regularly frequent the office.&lt;/p&gt;

&lt;h2 id=&quot;performance-review-season&quot;&gt;Performance Review Season&lt;/h2&gt;

&lt;p&gt;It’s here again. As a manager, I have a template for how I like to receive self-reflections that I’ve been dragging around with me for the past 15 (?!) years.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Laundry list all of your projects, contributions, and accomplishments during the time period [if this seems difficult, have some sympathy for your manager]&lt;/li&gt;
  &lt;li&gt;What future growth areas (lined up in phrases from the Career Ladder) would you like to focus on developing?&lt;/li&gt;
  &lt;li&gt;What specific project/work opportunities exist (or you’d like to create) that would help you develop the growth areas you described in the previous question? (or you would really, really want to work on).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And then it’s a matter of trying to shoe-horn those questions into the invariably slightly different organizational template. I wrote up a big document for my reports.&lt;/p&gt;

&lt;p&gt;Here’s what I drafted for myself on the opportunities question:&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;Improve predictability of team output. I would like to better develop a proactive ability to predict team output. Two focuses:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Tactical Planning&lt;/strong&gt;: Improving my short/medium-term project management skills to improve how work is defined, broken down, and scheduled with target dates.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Strategic Planning&lt;/strong&gt;: Planning and championing high-impact projects that would be engaging for both the team and engineering leadership.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;The end result of this, in addition to expanding impact, is growing the Ruby Architecture team and ensuring there is sufficient capacity (and buffers) for our core Areas of Responsibility.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;Further develop “out”-ward communication.&lt;/strong&gt; Improve my ability to brief and influence across teams and leadership at GitHub. Particularly focused on reinforcing the position and importance of Ruby and Rails within GitHub.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;h2 id=&quot;what-is-platform&quot;&gt;What is “Platform”&lt;/h2&gt;

&lt;p&gt;In my new department, UI &amp;amp; Monolith Platform, all of my sibling teams are platform, but look very different. We’ve been working on a document to share with the rest of the Engineering team about what we would say we do here. As part of that, I’ve been thinking about Maturity Models as an explanation for why our teams look so different. Some teams are early, where they’re still focused on adoption and “fit”, and other teams, like mine, that are so mature that I think our internal consumers are not always fully aware that they’re using the platform we’ve built with huge intention.&lt;/p&gt;

&lt;h2 id=&quot;a-universal-playbook&quot;&gt;A universal playbook&lt;/h2&gt;

&lt;p&gt;The past week at Universe, continually responding to the question “oh, what do you do?”, has helped me reflect on what I’m working towards. And realizing it feels like the same playbook I’ve run at other jobs. Lots more to it than this, but man, write your end-to-end tests people.&lt;/p&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2022/11/worknotes-november-13-2022&quot;&gt;Worknotes: November 13, 2022&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Sun, 13 Nov 2022 20:13:00 +0000</pubDate>
  <link>https://island94.org/2022/11/worknotes-november-13-2022</link>
  <guid isPermaLink="true">https://island94.org/2022/11/worknotes-november-13-2022</guid>
  
    <category>weeknotes</category>
  
    <category>worknotes</category>
  
  
</item>

    
      




<item>
  <title>Productive Struggle</title>
  <description>&lt;p&gt;From Logic #17, in &lt;a href=&quot;https://logicmag.io/home/the-edtech-gold-rush/&quot;&gt;“The Edtech Gold Rush”&lt;/a&gt; by Kevin Miller (emphasis mine):&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;One of the companies, Imagine Learning, distinguished itself by claiming that, on their platform, students could demonstrate their knowledge of English language and literature by “com-posing a rap song or creating a TikTok.” Some students seemed intrigued. Others groaned over their laptops. Yet another edtech firm was promising to uplift marginalized students by filling the classroom with the kind of entertainment media they consumed at home.&lt;/p&gt;

  &lt;p&gt;Such products can make educational content more accessible, especially at home, but they cannot actually address academic shortcomings any more than pen and paper. &lt;strong&gt;This is because learning happens through what educators call “productive struggle,” not merely the consumption of educational content. Productive struggle is the profession’s term for problem-solving at a level that is difficult for a student, but possible with effort and limited assistance. Educators refer to this magical window of learning as the “zone of proximal development.” Any education technology that is able to employ entertainment to transcend the difficulty inherent in learning ceases to be educational.&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;But even if such a technology is able to elicit productive struggle among students, it still runs up against a deeper challenge: pov-erty. The real reason that students have difficulty in the classroom is not due to the lack of thoughtful UX design, but because the trauma and instability wrought by the material circumstances of their home and community make engaging in productive struggle difficult. This does not mean that edtech products are useless. But they are not able to address the core cause of educational inequality any more than traditional instruction.&lt;/p&gt;

  &lt;p&gt;The recent growth in school funding from Covid relief measures gives educators a long-overdue opportunity to confront the material roots of educational inequality. But this influx of public money also represents a potential payday for a fast-growing edtech sector. The edtech market in the US is expected to grow to about $60 billion by 2026, according to an estimate from Global Industry Analysts, more than doubling its 2021 valuation and drastically outpacing the growth of the education sector as a whole. At a moment when governments are committing real resources to public education, companies touting disruptive digital approaches see a gold rush. They plan to win lucrative contracts by promising to solve a problem they can’t possibly solve.&lt;/p&gt;

&lt;/blockquote&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2022/10/productive-struggle&quot;&gt;Productive Struggle&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Sun, 30 Oct 2022 21:34:00 +0000</pubDate>
  <link>https://island94.org/2022/10/productive-struggle</link>
  <guid isPermaLink="true">https://island94.org/2022/10/productive-struggle</guid>
  
    <category>education</category>
  
    <category>learning</category>
  
  
</item>

    
  </channel>
</rss>
