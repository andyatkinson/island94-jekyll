<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Island94.org</title>
    <description>A Lost and Found
</description>
    <link>https://island94.org/</link>
    <atom:link href="https://island94.org/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 20 Mar 2023 15:48:59 +0000</pubDate>
    <lastBuildDate>Mon, 20 Mar 2023 15:48:59 +0000</lastBuildDate>
    <generator>Jekyll v4.3.2</generator>
    
    
      




<item>
  <title>Recently, March 12, 2023</title>
  <description>&lt;ul&gt;
  &lt;li&gt;Work has been complicated, recently. &lt;a href=&quot;https://techcrunch.com/2023/02/09/github-lays-off-10-and-goes-fully-remote/&quot;&gt;Layoffs, as a general idea&lt;/a&gt;, were announced a month ago; it was the same week I came down with a bad cold. I‚Äôve been fairly low energy since and have had trouble differentiating the two. I‚Äôm supremely proud and confident that my team is doing the most important work possible. We‚Äôll see!&lt;/li&gt;
  &lt;li&gt;The week prior to all of this, my dad came to visit and stay with us. Having an easier time hosting family was one of our goals in getting a 2nd bedroom. Success.&lt;/li&gt;
  &lt;li&gt;Wow, it‚Äôs nearly been a year since I left my last job. I‚Äôve had a number of former colleagues asking for help in leaving, in addition to talking with folks being pushed out: I was surprised to see Code for America finally kill Brigades, and really &lt;a href=&quot;https://statescoop.com/code-for-america-local-brigades-ending/&quot;&gt;twist the knife too&lt;/a&gt; by forcing groups to rename themselves.&lt;/li&gt;
  &lt;li&gt;GoodJob is great! I‚Äôve been thinking about &lt;a href=&quot;https://github.com/bensheldon/good_job/discussions/831&quot;&gt;replacing Advisory Locks&lt;/a&gt; with a lock strategy that‚Äôs more compatible with PgBouncer. But that will probably be a 2-year project at least of incrementally crabwalking towards that goal while avoiding breaking changes. &lt;a href=&quot;https://github.com/rubygems/rubygems.org/pull/3533&quot;&gt;Rubygems.org just adopted GoodJob&lt;/a&gt;; I am humbled.&lt;/li&gt;
  &lt;li&gt;On other projects, I‚Äôve been trying to lower costs. My S3 data-transfer bill went from $10 to $50 a month, which I‚Äôm not happy about; scrapers are the worst ü§∑‚Äç‚ôÄÔ∏è I‚Äôve also been experimenting with Dokku for packing some smaller projects (paying $15 once rather than $12 per app), though the VM locked up once on a Saturday night and I had to reboot it and this is exactly why I don‚Äôt want to manage my own servers.&lt;/li&gt;
  &lt;li&gt;My brother and I have been planning a Celebration of Life for my mom.&lt;/li&gt;
  &lt;li&gt;I‚Äôm so happy to finally be back on Daylight Savings Time.&lt;/li&gt;
&lt;/ul&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/03/recently-march-12-2023&quot;&gt;Recently, March 12, 2023&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Mon, 13 Mar 2023 00:26:00 +0000</pubDate>
  <link>https://island94.org/2023/03/recently-march-12-2023</link>
  <guid isPermaLink="true">https://island94.org/2023/03/recently-march-12-2023</guid>
  
    <category>weeknotes</category>
  
  
</item>

    
      




<item>
  <title>Service Object Objects in Ruby</title>
  <description>&lt;p&gt;For anyone that follows me on social media, I‚Äôll sometimes get into a &lt;a href=&quot;https://deprogrammaticaipsum.com/james-coplien/&quot;&gt;Coplien&lt;/a&gt;-esque funk of ‚ÄúI don‚Äôt wanna write Classes. I want to write &lt;em&gt;Objects&lt;/em&gt;!‚Äù. I don‚Äôt want to negotiate an industrial-relations policy for instances of Person in the current scope. I want to imagine the joy and misery Alice and Bob will experience working together right now.&lt;/p&gt;

&lt;p&gt;I was thinking of that recently when &lt;a href=&quot;https://www.reddit.com/r/ruby/comments/10sooyr/comment/j74j5qw/?utm_source=reddit&amp;amp;utm_medium=web2x&amp;amp;context=3&quot;&gt;commenting on Reddit&lt;/a&gt; about Caleb Hearth‚Äôs &lt;a href=&quot;https://calebhearth.com/decree&quot;&gt;‚ÄúThe Decree Design Pattern‚Äù&lt;/a&gt;. Which ended up in the superset of these two thoughts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;heck yeah! if it‚Äôs globally distinct it should be globally referenceable&lt;/li&gt;
  &lt;li&gt;oh, oh no, I don‚Äôt like looking at &lt;em&gt;that&lt;/em&gt; particular Ruby code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This was my comment to try to personally come to terms with those thoughts, iteratively:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# a consistent callable&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;my_decree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_something&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# ok, but globally scoped&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;MY_DECREE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_something&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# ok, but without the shouty all-caps&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MyDecree&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;do_something&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# ok, but what about when it gets really complex&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyDecree&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@variable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;variable&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;do_something&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;do_something_else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;do_even_more&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_even_more&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# something really complicated....&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From the outside, &lt;em&gt;object&lt;/em&gt; perspective, these are all have the same interchangeable interface (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.call&lt;/code&gt;), and except for the first one, accessible everywhere. That‚Äôs great, from my perspective! Though I guess it‚Äôs a pretty short blog post to say:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Decrees are globally discrete and call-able objects&lt;/li&gt;
  &lt;li&gt;The implementation is up to you!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unfortunately, the moment the internals come into play, it gets messy. But I don‚Äôt think that should take away from the external perspective.&lt;/p&gt;


  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/02/service-object-objects-in-ruby&quot;&gt;Service Object Objects in Ruby&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Tue, 14 Feb 2023 16:18:00 +0000</pubDate>
  <link>https://island94.org/2023/02/service-object-objects-in-ruby</link>
  <guid isPermaLink="true">https://island94.org/2023/02/service-object-objects-in-ruby</guid>
  
    <category>Ruby</category>
  
  
</item>

    
      




<item>
  <title>Slop and call</title>
  <description>&lt;p&gt;In my role as Engineering Manager, I frequently play &lt;em&gt;Keeper of the Process&lt;/em&gt;. Having worked effectively alongside plenty of agile &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#noplanning&lt;/code&gt; people (RIP Andrew), and carrying the scars of dysfunctional processes (oh, PRDs and OGSM), it feels historically out of character to lean into OKR scores and target dates. And I think I‚Äôve made my peace with it.&lt;/p&gt;

&lt;p&gt;When I was in high school, my friend‚Äôs dad Gary (RIP Gary) retired and bought a championship pool table. The pool table went in their living room and everything else came out. Nothing else fit. The room was a pool table and a stero, which Gary kept tuned to classic jazz. We played a lot of pool and listened to a lot of Charles Mingus.&lt;/p&gt;

&lt;p&gt;The two games I remember playing most was 2-ball ‚ÄúEnglish‚Äù and 9-ball. English is a ‚Äúcalled‚Äù game; you have to say which ball and hole you‚Äôre aiming for before making the shot. 9-ball is played ‚Äúslop‚Äù, as long as you hit the lowest-numbered ball first, it doesn‚Äôt matter which ball goes into which hole.&lt;/p&gt;

&lt;p&gt;Both games have their techniques. Playing English I got really good at fine ball handling and putting a sidespin on the ball (that‚Äôs the ‚ÄúEnglish‚Äù) and having a narrow intent. With 9-ball, I learned to do a lot of what we call a ‚Äútextbook‚Äù-shot (I dunno why we gave only this one shot that name; we were 17). The shot was to bounce the ball off of as many alternating rails as possible until the ball eventually walked itself into a pocket. Just slam it really.&lt;/p&gt;

&lt;p&gt;The point is, both of them were ok ways to play. They were just different. It‚Äôs fine.&lt;/p&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/02/slop-and-call&quot;&gt;Slop and call&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Mon, 13 Feb 2023 04:34:00 +0000</pubDate>
  <link>https://island94.org/2023/02/slop-and-call</link>
  <guid isPermaLink="true">https://island94.org/2023/02/slop-and-call</guid>
  
  
</item>

    
      




<item>
  <title>Prevent CDN poisoning from Fat GET/HEAD Requests in Ruby on Rails</title>
  <description>&lt;p&gt;There are many different flavors of &lt;a href=&quot;https://portswigger.net/research/web-cache-entanglement&quot;&gt;web cache poisoning discovered by Security Researcher James Kettle&lt;/a&gt;. Read on for an explanation of one I‚Äôve run across‚Ä¶&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is a Fat GET/HEAD Request?&lt;/strong&gt; A GET or HEAD request is ‚Äúfat‚Äù when it has a request body. It‚Äôs unexpected! Typically one sees a request body with a POST or PUT request because the body contains form data. The HTTP specification says that including a request body with GET or HEAD requests is &lt;a href=&quot;https://stackoverflow.com/a/983458&quot;&gt;&lt;em&gt;undefined&lt;/em&gt;&lt;/a&gt;. You can do it, and it‚Äôs up to the application to figure out what that means. Sometimes it‚Äôs bad!&lt;/p&gt;

&lt;p&gt;You can get a sense of the applications that intentionally support Fat Requests (and how grumpy it makes some people) by reading through this &lt;a href=&quot;https://github.com/postmanlabs/postman-app-support/issues/131&quot;&gt;Postman issue&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fat Requests can lead to CDN and cache poisoning in Rails.&lt;/strong&gt; CDNs and caching web proxies (like Varnish) are frequently configured to cache the response from a GET or HEAD request based solely on the request‚Äôs URL and not the contents of the request body (they don‚Äôt cache POSTs or PUTs at all). If an application isn‚Äôt deliberately handling the request body, it may cause unexpected content to be cached and served.&lt;/p&gt;

&lt;p&gt;For example, you have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/search&lt;/code&gt; endpoint:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET /search&lt;/code&gt; shows a landing page with some explanatory content&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET /search?q=foo&lt;/code&gt; shows the search results for ‚Äúfoo‚Äù.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Here‚Äôs what a Fat Request looks like:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  GET /search     &amp;lt;== the url for the landing page

  q=verybadstuff  &amp;lt;== oh, but with a request body
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In a Rails Controller, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parameters&lt;/code&gt; (alias &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;params&lt;/code&gt;) merges query parameters (that‚Äôs the URL values) with request parameters (that‚Äôs the body values) into a single data structure. If your controller uses the presence of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;params[:q]&lt;/code&gt; to determine whether to show the landing page or the search results, it‚Äôs possible that when someone sends that Fat Request, your CDN may cache and subsequently serve the results for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;verybadstuff&lt;/code&gt; every time someone visits the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/search&lt;/code&gt; landing page. That‚Äôs bad!&lt;/p&gt;

&lt;p&gt;Here‚Äôs how to Curl it:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-XGET&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Content-Type: application/x-www-form-urlencoded&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;q=verybadstuff&quot;&lt;/span&gt; http://localhost:3000/search
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here are 3 ways to fix it‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;solution-1-fix-at-the-cdn&quot;&gt;Solution #1: Fix at the CDN&lt;/h2&gt;

&lt;p&gt;The most straightforward place to fix this should be at the caching layer, but it‚Äôs not always easy.&lt;/p&gt;

&lt;p&gt;With Cloudflare, you could rewrite the GET request‚Äôs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt; header if it is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application/x-www-form-urlencoded&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;multipart/form-data&lt;/code&gt;. Or use a Cloudflare Worker to drop the request body.&lt;/p&gt;

&lt;p&gt;Varnish makes it easy to drop the request body for any GET request.&lt;/p&gt;

&lt;p&gt;Other CDNs or proxies may be easier or more difficult. It depends!&lt;/p&gt;

&lt;p&gt;Update via &lt;a href=&quot;https://github.com/Mr0grog&quot;&gt;Mr0grog&lt;/a&gt;: AWS Cloudfront returns a &lt;a href=&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/RequestAndResponseBehaviorCustomOrigin.html#RequestCustom-get-body&quot;&gt;403 by default&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;solution-2-deliberately-use-query_parameters&quot;&gt;Solution #2: Deliberately use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;query_parameters&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Rails provides three different methods for accessing parameters:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;query_parameters&lt;/code&gt; for the values in the request URL&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;request_parameters&lt;/code&gt; ) for the values in the request body&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parameters&lt;/code&gt; (alias &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;params&lt;/code&gt;) for the problematic combination of them both. Values in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;query_parameters&lt;/code&gt; take precedence over values in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;request_parameters&lt;/code&gt; when they are merged together.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Developers could be diligent and make sure to only use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;query_parameters&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#index&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#show&lt;/code&gt; , or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get&lt;/code&gt; routed actions. Here‚Äôs an example from the &lt;a href=&quot;https://github.com/git/git-scm.com/issues/1551&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git-scm&lt;/code&gt; project&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;solution-3-patch-rails&quot;&gt;Solution #3: Patch Rails&lt;/h2&gt;

&lt;p&gt;Changes were &lt;a href=&quot;https://github.com/rails/rails/issues/39974&quot;&gt;proposed in Rails&lt;/a&gt; to not have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parameters&lt;/code&gt; merge in the body values for GET and HEAD requests; it was rejected because it‚Äôs more a problem with the upstream cache than it is with Rails.&lt;/p&gt;

&lt;p&gt;You can patch your own version of Rails. Here‚Äôs an example that patches the method in &lt;a href=&quot;https://github.com/rails/rails/blob/21a3b52ba0b7d94b4903e02b6ac537a7d1d1c817/actionpack/lib/action_dispatch/http/parameters.rb#L49-L63&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActionDispatch::Request&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# config/initializers/sanitize_fat_requests.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SanitizeFatRequests&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parameters&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;action_dispatch.request.parameters&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head?&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query_parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dup&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;merge!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path_parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;set_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;action_dispatch.request.parameters&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:params&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:parameters&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;ActionDispatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SanitizeFatRequests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Some RSpec tests to verify this&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;rails_helper&apos;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SanitizeFatRequests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;type: :request&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;does not merge body params in GET requests&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/search&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;headers: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;CONTENT_TYPE&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;application/x-www-form-urlencoded&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;env: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;rack.input&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;StringIO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;q=verybadstuff&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# verify that the request is correctly shaped because&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# the test helpers don&apos;t expect this kind of request&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;request_parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;q&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;verybadstuff&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;action&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;panlexicon&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;controller&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;search&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# the behavioral expectation &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;not_to&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;verybadstuff&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;


  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/02/prevent-cdn-poisoning-from-fat-get-head-requests-in-ruby-on-rails&quot;&gt;Prevent CDN poisoning from Fat GET/HEAD Requests in Ruby on Rails&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Sun, 12 Feb 2023 20:32:00 +0000</pubDate>
  <link>https://island94.org/2023/02/prevent-cdn-poisoning-from-fat-get-head-requests-in-ruby-on-rails</link>
  <guid isPermaLink="true">https://island94.org/2023/02/prevent-cdn-poisoning-from-fat-get-head-requests-in-ruby-on-rails</guid>
  
    <category>rails</category>
  
  
</item>

    
      




<item>
  <title>Introducing GoodJob Bulk and Batch</title>
  <description>&lt;p&gt;GoodJob is a multithreaded, Postgres-based, ActiveJob backend for Ruby on Rails. I recently released two new features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GoodJob::Bulk&lt;/code&gt; to optimize enqueuing large numbers of jobs (released in GoodJob v3.9)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GoodJob::Batch&lt;/code&gt; to coordinate parallelized sets of jobs (released in GoodJob v3.10)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Big thanks to @julik, @mollerhoj, @v2kovac, @danielwestendorf, @jrochkind, @mperham and others for your help and counsel!&lt;/p&gt;

&lt;h3 id=&quot;bulk-enqueue&quot;&gt;Bulk enqueue&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bensheldon/good_job#bulk-enqueue&quot;&gt;GoodJob‚Äôs Bulk-enqueue functionality&lt;/a&gt; can buffer and enqueue multiple jobs at once, using a single INSERT statement. This can be more performant when enqueuing a large number of jobs.&lt;/p&gt;

&lt;p&gt;I was inspired by a discussion within a Rails pull request to implement &lt;a href=&quot;https://github.com/rails/rails/pull/46603&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;perform_all_later&lt;/code&gt; within Active Job&lt;/a&gt;. I wanted to both support the way most people enqueue Active Job jobs with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;perform_later&lt;/code&gt; and also &lt;a href=&quot;https://github.com/rails/rails/pull/43434&quot;&gt;encourage people to work directly with Active Job instances too&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# perform_later within a block&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;active_jobs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GoodJob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Bulk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enqueue&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;MyJob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform_later&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;AnotherJob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform_later&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# or with Active Job instances&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;active_jobs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MyJob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AnotherJob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;GoodJob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Bulk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;active_jobs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Releasing Bulk functionality was a two-step: I initially implemented it while working on Batch functionality, and then with @julik‚Äôs initiative and help, we extracted and polished it to be used on its own.&lt;/p&gt;

&lt;h3 id=&quot;batches&quot;&gt;Batches&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bensheldon/good_job#batches&quot;&gt;GoodJob‚Äôs Batch functionality&lt;/a&gt; coordinates parallelized sets of jobs. The ability to coordinate a set of jobs, and run callbacks during lifecycle events, has been a highly demanded feature. Most people who talked to me about job batches were familiar with &lt;a href=&quot;https://sidekiq.org/products/pro.html&quot;&gt;Sidekiq Pro&lt;/a&gt; ‚Äòs &lt;a href=&quot;https://github.com/mperham/sidekiq/wiki/Batches]&quot;&gt;batch functionality&lt;/a&gt;, which I didn‚Äôt want to simply recreate (Sidekiq Pro is excellent!). So I‚Äôve been collecting use cases and thinking about what‚Äôs most in the spirit of Rails, Active Job, and Postgres:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Batches are mutable, database-backed objects with foreign-key relationships to sets of job records.&lt;/li&gt;
  &lt;li&gt;Batches have  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;properties&lt;/code&gt; which use Active Job‚Äôs serializer, so they can contain and rehydrate any GlobalID object, like Active Record models.&lt;/li&gt;
  &lt;li&gt;Batches have callbacks, which are themselves Active Job jobs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here‚Äôs a simple example:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;GoodJob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Batch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;on_finish: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MyBatchCallbackJob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;user: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;MyJob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform_later&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;OtherJob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform_later&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# When these jobs have finished, it will enqueue your `MyBatchCallbackJob.perform_later(batch, options)`&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyBatchCallbackJob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationJob&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Callback jobs must accept a `batch` and `params` argument&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;batch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# The batch object will contain the Batch&apos;s properties, which are mutable&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;batch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &amp;lt;User id: 1, ...&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Params is a hash containing additional context (more may be added in the future)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; :finish, :success, :discard&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There‚Äôs more depth and examples in the &lt;a href=&quot;https://github.com/bensheldon/good_job#batches&quot;&gt;GoodJob Batch documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;please-help&quot;&gt;Please help!&lt;/h3&gt;

&lt;p&gt;Batches are definitely a work in progress, and I‚Äôd love your feedback:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What is the Batch functionality missing? Tell me your use cases.&lt;/li&gt;
  &lt;li&gt;Help improve the &lt;a href=&quot;https://goodjob-demo.herokuapp.com/good_job/jobs&quot;&gt;Web Dashboard UI&lt;/a&gt; (it‚Äôs rough but functional!)&lt;/li&gt;
  &lt;li&gt;Find bugs! I‚Äôm sure there are some edge cases I overlooked.&lt;/li&gt;
&lt;/ul&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/02/introducing-goodjob-bulk-and-batch&quot;&gt;Introducing GoodJob Bulk and Batch&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Sun, 05 Feb 2023 22:37:00 +0000</pubDate>
  <link>https://island94.org/2023/02/introducing-goodjob-bulk-and-batch</link>
  <guid isPermaLink="true">https://island94.org/2023/02/introducing-goodjob-bulk-and-batch</guid>
  
    <category>GoodJob</category>
  
  
</item>

    
      




<item>
  <title>Framing open source contributions at work</title>
  <description>&lt;p&gt;Excerpts from the excellent RailsConf 2022 keynote: &lt;a href=&quot;https://www.youtube.com/watch?v=MbqJzACF-54&quot;&gt;The Success of Ruby on Rails by Eileen Uchitelle&lt;/a&gt; [reformatted from the transcript]:&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;Upgrading is one of the easiest ways to find an area of Rails that can benefit from your contributions.  Fixing an issue in a recent release has a high likelihood of being merged.&lt;/p&gt;

  &lt;p&gt;Running off Rails Main is another way to find contributions to Rails.  If you don‚Äôt want to run your Main in production,   you could run it in a separate CI build.  Shopify, GitHub and Basecamp run it.&lt;/p&gt;

  &lt;p&gt;Running off Main may be harder than running off a release because features and bug fixes are  a little in flux sometimes. If you are running  off of Main, a feature added to the Main branch could be removed without deprecation. This is a worthwhile risk to take on because it lowers the overall risk of an upgrade.  When you run off Main, you‚Äôre less likely to fall behind upgrading because it becomes  part of your weekly or monthly maintenance.  Upgrading becomes routine, second nature rather  than novel and scary. Changes are easy to isolate. It‚Äôs just slightly less polished. Like I  said, I still think it‚Äôs pretty stable.&lt;/p&gt;

  &lt;p&gt;Another way to find places to contribute  is look at your own applications.&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Do you have monkey patches on Rails code  that are fixes bugs or changing behavior?   Instead of leaving them there, upstream  the fix and delete the monkey patch.&lt;/li&gt;
    &lt;li&gt;Is there infrastructure level code that  doesn‚Äôt really pertain to your product? It‚Äôs possible this could be a great addition to  Rails. When I wrote the database in Rails, it came from GitHub‚Äôs monolith. It made perfect sense  because it was getting in the way of upgrades, didn‚Äôt expose any intellectual property, had  nothing to do with your product features and&lt;br /&gt;
something many applications could benefit from.&lt;/li&gt;
    &lt;li&gt;Lastly and most importantly, keep showing up.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;‚Ä¶ Ultimately,  if more companies treated the framework as an extension of the application, it would  result in higher resilience and stability. Investment in Rails ensures your foundation will not crumble under the weight of your application. Treating it as an unimportant part of your application is a mistake and many, many leaders make this mistake.&lt;/p&gt;

  &lt;p&gt;‚Ä¶leaders see funding open source risky is because they don‚Äôt actually  understand the work. ‚Ä¶ Often, leaders worry if there‚Äôs a team working in open source, other teams are going to be jealous or resentful that that team is doing ‚Äúfun‚Äù work. ‚Ä¶&lt;/p&gt;

  &lt;p&gt;Maintainers need to make changes, deal with security incidents and also handle criticism from many people. Maintaining and contributing to open source requires a different skill set than product work. That doesn‚Äôt make it any less essential.&lt;/p&gt;

  &lt;p&gt;‚Ä¶Many product companies don‚Äôt like words like ‚Äúresearch‚Äù and ‚Äúexperimental.‚Äù  They can imply work without goals. Use words like  ‚Äúinvestment.‚Äù And demonstrate the direct value will bring. Make sure it is measurable and will  make the application and product more successful. A great example of measurable work is  a change that improves performance. If you can tie contributions to direct customer improvements, it‚Äôs easier to show leadership.&lt;/p&gt;

  &lt;p&gt;‚Ä¶As I started contributing more and more  and pealing back the layers of Rails, the impact is limitless. I started looking at how applications stretched  the boundaries of what Rails was meant to do.&lt;/p&gt;

  &lt;p&gt;‚Ä¶Ultimately, I want you to contribute to Rails because it‚Äôs going to enable you to build a better company and product. The benefits of investing in Rails go far beyond improving the framework.&lt;/p&gt;

  &lt;p&gt;Investing in Rails will build up the skills of your engineering team. They will developer better communication skills, learn to navigate criticism,  debugging skills and how the framework functions.  It will teach engineers about the inner-workings and catch bugs.&lt;/p&gt;

  &lt;p&gt;Monkey patching is far more dangerous than I think most realize. They break  with upgrades and cause security incidents.  When you write a monkey patch, you maintain a portion of Rails code. Wouldn‚Äôt it have been   better to patch it upstream rather than taking on that risk and responsibility.&lt;/p&gt;

  &lt;p&gt;It will give your engineering team the skills  they need to make better technical decisions. You‚Äôre ensuring that Rails benefits your application and the company for the long-term.&lt;/p&gt;

  &lt;p&gt;‚Ä¶Contributing to Rails is only &lt;em&gt;not&lt;/em&gt; essential if you don‚Äôt care about the direction the framework is headed in. We should be contributing  because we care about the changes.&lt;/p&gt;

  &lt;p&gt;We want to ensure our apps are upgradeable, performant and stable.&lt;/p&gt;

  &lt;p&gt;Investment in Rails also means you won‚Äôt have to rewrite your application in a few years because Rails no longer supports what you need. When you fail  to invest in your tools, you end up being unable to upgrade. Your engineering team is miserable. The codebase is a mess and writing features is impossible. You‚Äôre forced into a rewrite, your engineers want to write Rails and you can no longer let them do that. You have to build a bunch of features before you site falls over.&lt;/p&gt;

  &lt;p&gt;It‚Äôs not Rails‚Äô fault you made  the decision to invest elsewhere.&lt;/p&gt;

  &lt;p&gt;If you build contributing into your culture, the benefits are clear:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Your engineering teams‚Äô skills will improve.&lt;/li&gt;
    &lt;li&gt;Rails will evolve with your  application because you‚Äôre helping decide how it needs to change.&lt;/li&gt;
    &lt;li&gt;Your application will be  more resilient because there‚Äôs low tech debt and your foundation is stable. Active investment  prevents your application from degrading.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;Building a team to invest in Rails is  proactive. Rewriting an application is reactive. Which one do you think is better for business in the long run?&lt;/p&gt;

&lt;/blockquote&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/01/framing-open-source-contributions-at-work&quot;&gt;Framing open source contributions at work&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Fri, 27 Jan 2023 00:51:00 +0000</pubDate>
  <link>https://island94.org/2023/01/framing-open-source-contributions-at-work</link>
  <guid isPermaLink="true">https://island94.org/2023/01/framing-open-source-contributions-at-work</guid>
  
  
</item>

    
      




<item>
  <title>How GoodJob&apos;s Cron does distributed locks</title>
  <description>&lt;p&gt;&lt;a href=&quot;https://github.com/bensheldon/good_job&quot;&gt;GoodJob&lt;/a&gt; is a multithreaded, Postgres-based, ActiveJob backend for Ruby on Rails. GoodJob has many features that take it beyond ActiveJob. One such feature is &lt;a href=&quot;https://github.com/bensheldon/good_job/blob/994ecff5323bf0337e10464841128fda100750e6/README.md#cron-style-repeatingrecurring-jobs&quot;&gt;cron-like functionality&lt;/a&gt; that allows scheduling repeated jobs on a fixed schedule.&lt;/p&gt;

&lt;p&gt;This post is a brief technical story of how GoodJob prevents duplicated cron jobs from running in a multi-process, distributed environment.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is all true as of GoodJob‚Äôs current version, 3.7.4.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;briefly-how-goodjobs-cron-works&quot;&gt;Briefly, how GoodJob‚Äôs cron works&lt;/h3&gt;

&lt;p&gt;GoodJob heavily leans on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Concurrent::Ruby&lt;/code&gt; high-level primitives, and the cron implementation is no different. &lt;a href=&quot;https://github.com/bensheldon/good_job/blob/994ecff5323bf0337e10464841128fda100750e6/lib/good_job/cron_manager.rb&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GoodJob::CronManager&lt;/code&gt;&lt;/a&gt; accepts a fixed hash of schedule configuration and feeds them into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Concurrent::ScheduledTask&lt;/code&gt;s, which then trigger &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;perform_later&lt;/code&gt; on the job classes at the prescribed times.&lt;/p&gt;

&lt;p&gt;A locking strategy is necessary. GoodJob can be running across multiple processes, across numerous isolated servers or containers, in one application. GoodJob should guarantee that at the scheduled time, only a single scheduled job is enqueued.&lt;/p&gt;

&lt;h3 id=&quot;initially-advisory-locks&quot;&gt;Initially, advisory locks&lt;/h3&gt;

&lt;p&gt;When &lt;a href=&quot;https://github.com/bensheldon/good_job/pull/297&quot;&gt;GoodJob‚Äôs cron feature was first introduced in version 1.12&lt;/a&gt;, Cron used an existing feature of GoodJob: &lt;a href=&quot;https://github.com/bensheldon/good_job/blob/994ecff5323bf0337e10464841128fda100750e6/README.md#activejob-concurrency&quot;&gt;Concurrency Control&lt;/a&gt;. Concurrency Control places limits on how many jobs can be enqueued or performed at the same time.&lt;/p&gt;

&lt;p&gt;Concurrency Control works by assigning jobs a ‚Äúkey‚Äù which is simply a queryable string. Before enqueuing jobs, GoodJob will count how many job records already exist with that same key and prevent the action if the count exceeds the configured limit. GoodJob uses advisory locks to avoid race conditions during this accounting phase.&lt;/p&gt;

&lt;p&gt;There were some downsides to using Concurrency Control for Cron.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It was a burden on developers. Concurrency Control extends &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActiveJob::Base&lt;/code&gt; and required the developer to configure Concurrency Control rules separately from the Cron configuration.&lt;/li&gt;
  &lt;li&gt;It wasn‚Äôt very performant. Concurrency Control‚Äôs design is &lt;em&gt;optimistic&lt;/em&gt; and works best when collisions are rare or infrequent. But a large, clock-synchronized formation of GoodJob processes is a &lt;em&gt;pessimistic&lt;/em&gt; concurrency scenario, and it could take several seconds of advisory locking and unlocking across all the processes to insert a single job.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;then-a-unique-index&quot;&gt;Then, a unique index&lt;/h3&gt;

&lt;p&gt;GoodJob v2.5.0 &lt;a href=&quot;https://github.com/bensheldon/good_job/pull/423&quot;&gt;changed the cron locking strategy&lt;/a&gt;. Instead of using Concurrency Control‚Äôs advisory locks, GoodJob uses a unique compound index to prevent the same cron job from being enqueued/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INSERT&lt;/code&gt;ed into the database multiple times.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In addition to the existing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cron_key&lt;/code&gt; column in job records, the change added a new timestamp column, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cron_at&lt;/code&gt; to  store when the cron job is enqueued.&lt;/li&gt;
  &lt;li&gt;Added a unique index on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[cron_key, cron_at]&lt;/code&gt; to ensure that only one job is inserted for the given key and time.&lt;/li&gt;
  &lt;li&gt;Handled the expected &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActiveRecord::RecordNotUnique&lt;/code&gt; when multiple cron processes try to enqueue the same cron job simultaneously and the unique index prevents the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INSERT&lt;/code&gt; from taking place&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, when a thundering herd of GoodJob processes tries to enqueue the same cron job at the same time, the database uses its unique index constraint to prevent multiple job records from being created. Great!&lt;/p&gt;

&lt;h3 id=&quot;does-it-do-a-good-job&quot;&gt;Does it do a good job?&lt;/h3&gt;

&lt;p&gt;Yes! I‚Äôve received lots of positive feedback in the year+ since GoodJob‚Äôs cron moved to a unique index locking strategy. From the application perspective, there‚Äôs much less enqueueing latency using a unique index than when using advisory locks. And from the developer‚Äôs perspective, it does &lt;em&gt;just work&lt;/em&gt; without additional configuration beyond the schedule.&lt;/p&gt;

&lt;p&gt;Using a unique index does require preserving the job records for a bit after the jobs have been performed. Otherwise, poor clock synchronization across processes could lead to a duplicate job being inserted again if the job has already been performed and removed from the table/index. Fortunately, preserving job records should not be too burdensome because GoodJob will &lt;a href=&quot;https://github.com/bensheldon/good_job/blob/994ecff5323bf0337e10464841128fda100750e6/README.md#monitor-and-preserve-worked-jobs&quot;&gt;automatically clean them up&lt;/a&gt; too.&lt;/p&gt;

&lt;p&gt;Lastly, one goal of writing this is the hope/fear that a Database Administrator will tell me this is a terrible strategy and provide a better one. Until that happens, I have confidence GoodJob‚Äôs cron is good. &lt;a href=&quot;https://github.com/bensheldon/good_job/discussions/806&quot;&gt;I‚Äôd love your feedback!&lt;/a&gt;&lt;/p&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/01/how-goodjob-s-cron-does-distributed-locks&quot;&gt;How GoodJob&apos;s Cron does distributed locks&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Sun, 22 Jan 2023 18:18:00 +0000</pubDate>
  <link>https://island94.org/2023/01/how-goodjob-s-cron-does-distributed-locks</link>
  <guid isPermaLink="true">https://island94.org/2023/01/how-goodjob-s-cron-does-distributed-locks</guid>
  
    <category>GoodJob</category>
  
  
</item>

    
      




<item>
  <title>Conflict, at work</title>
  <description>&lt;ul&gt;
  &lt;li&gt;I had a conversation with a coworker that reminded me (again!) of this &lt;a href=&quot;https://island94.org/2022/03/over-rapported&quot;&gt;Foreign Affairs essay&lt;/a&gt;. It was about receiving feedback that seemed to focus on minimizing interpersonal conflict over things like achieving goals and strategy and impact; it felt familiar.&lt;/li&gt;
  &lt;li&gt;I‚Äôve had coworkers and executives in other jobs that were like ‚Äúpeople need to be more comfortable with conflict‚Äù. I‚Äôve also been screamed at in a postmortem at a different job. So like, my feelings are mixed. Like are we talking about the absence of psychological safety, or too much of it? I dunno, I could never draw out specifics. I‚Äôm now thinking it was actually about the previous bullet point.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://island94.org/2022/02/it-asks-you-to-be-interactive&quot;&gt;Schulman&lt;/a&gt; makes the point that you‚Äôre either in a relationship with someone, or you aren‚Äôt.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I read this &lt;a href=&quot;https://harpers.org/archive/2023/01/exit-technologists-libertarianism/&quot;&gt;Harper‚Äôs essay about working at Wired UK&lt;/a&gt; by Hari Kunzru with the line:&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;The political economist Albert¬†O. Hirschman famously characterized the choice that is faced by people within declining institutions as being between ‚Äúvoice‚Äù and ‚Äúexit.‚Äù Either you speak up to change things, or you leave and look for something better.‚Äô&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Which led me to find &lt;a href=&quot;https://www.robkhenderson.com/past-newsletter/exit-voice-and-loyalty-a-review&quot;&gt;this essay about the book&lt;/a&gt; which pulls this lovely quote from Hirschman:&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;The ultimate in unhappiness and paradoxical loyalist behavior occurs when the public evil produced by the organization promises to accelerate or to reach some intolerable level as the organization deteriorates; then‚Ä¶the decision to exit will become ever more difficult the longer one fails to exit. The conviction that one has to stay on to prevent the worst grows all the time.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;But this is maybe now more about disfunction than exit. But I‚Äôve also been in the position of being in difficult conflict when explaining that a certain set of strategies will lead to difficulties in attracting and retaining talent. And then most of my favorite people were gone. And then so was I.&lt;/li&gt;
&lt;/ul&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/01/conflict-at-work&quot;&gt;Conflict, at work&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Wed, 04 Jan 2023 05:17:00 +0000</pubDate>
  <link>https://island94.org/2023/01/conflict-at-work</link>
  <guid isPermaLink="true">https://island94.org/2023/01/conflict-at-work</guid>
  
  
</item>

    
      




<item>
  <title>2022 in review</title>
  <description>&lt;ul&gt;
  &lt;li&gt;Family: My mom passed away; first parent to go. Of a plus, we spent a lot of time with my brother and his young family. We had to cancel a big family trip to Europe, but hope to make up with a trip in 2023.&lt;/li&gt;
  &lt;li&gt;Community: Turned 40 this year; celebrated 11 years in SF; coming up on 3 years on Nob Hill. Things feel good. We were approved as a foster/adopt Resource Family, but with everything that happened with my mom, we haven‚Äôt yet begun hosting children yet. I‚Äôm going into year three of strategic planning committee at St. Francis.&lt;/li&gt;
  &lt;li&gt;Work: Started at GitHub after five years at Code for America. Still feels a bit like a dream that I get to continue to do what I want technically (Ruby and Rails) while also working with good people. I‚Äôve continued to work with my leadership coach, which has been nice continuity.&lt;/li&gt;
  &lt;li&gt;Projects &amp;amp; Consulting: It‚Äôs now been 10 years since I registered as a small business in SF, which I did when I first started earning money with Day of the Shirt and doing various consulting jobs. GoodJob is floating along, and become a small source of GitHub Sponsors funds. The other constellation of projects continued in maintenance: Brompt, Panlexicon, etc.&lt;/li&gt;
&lt;/ul&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/01/2022-in-review&quot;&gt;2022 in review&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Tue, 03 Jan 2023 01:19:00 +0000</pubDate>
  <link>https://island94.org/2023/01/2022-in-review</link>
  <guid isPermaLink="true">https://island94.org/2023/01/2022-in-review</guid>
  
  
</item>

    
      




<item>
  <title>Liberatory accountability</title>
  <description>&lt;p&gt;From Lee Shevek‚Äôs &lt;a href=&quot;https://theanarchistlibrary.org/library/lee-shevek-is-punishment-carceral-logic&quot;&gt;‚ÄúIs Punishment ‚ÄòCarceral Logic‚Äô?‚Äù&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;‚Ä¶the difference between carceral logic and liberatory accountability is not the presence/lack of punishment. Rather, the difference lies in how much power the person who has done harm has. Carceral logic aims to strip them of their personal power, while liberatory accountability processes require that they take ownership of that power. That is, ultimately, what accountability is: taking responsibility for your power as well as for the consequences of your use of it. Recognizing your own agency in having made a choice that resulted in harm, facing the people you hurt, giving them answers and apologies, and claiming your ability to do differently. This is what the carceral system does not allow. It strips people entirely of their agency, requires of them no meaningful repair process, and locks them in a cell where they are ritualistically abused by the State. This is a process that heals no one, nor was it ever even intended for healing or repair. It is a system only of control.&lt;/p&gt;

  &lt;p&gt;Liberatory accountability processes, on the other hand, demand something incredibly difficult for people who do harm: acknowledgement of their own power, their own responsibility to the harm they do with that power and their obligation to use that same power to make amends. Taking that responsibility also means acknowledging and respecting the consequences for the harm they do. If I truly take a harm I‚Äôve done seriously, if I genuinely see it as harm, then I also will respect that the person I harmed may need to put more boundaries up between us to feel safe again. If the harm is more extreme, I will see the steps the surrounding community takes (closing my access to certain spaces, demanding my participation in ongoing accountability processes, etc.) as important responses to re-establish safety where my actions ruptured it, even if those responses are painful or uncomfortable to me. Absent of these consequences, the people most adept at doing harm while maintaining community support have free reign to continue perpetuating cycles of harm that will reverberate through years (often generations) to come, and survivors flee into solitude because there are no communal norms in place to provide them any real or trustworthy sense of safety. This is, in fact, the status quo of the world we live in now.&lt;/p&gt;

  &lt;p&gt;The real distinction between carceral logic and liberatory accountability is that one process violently strips someone of their humanity and agency, while the other demands that people who do harm take full command of their humanity and agency to atone for that harm and become better members of the community in the process. The carceral system says: ‚ÄúYou are a criminal and you deserve to be subject to constant harm and control because of it.‚Äù Liberatory accountability says: ‚ÄúYou are a person who chose to do harm, we believe in your capacity to choose to face the consequences of that harm and do what you can to repair it.‚Äù&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;This reminded me of SorryWatch‚Äôs &lt;a href=&quot;https://sorrywatch.com/how-to-apologize-a-short-checklist/&quot;&gt;‚ÄúHow to apologize: a short checklist‚Äù&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;APOLOGIZE ‚Äì Say ‚ÄúI‚Äôm sorry‚Äù or ‚ÄúI apologize.‚Äù Take responsibility. Talk about what you did, not just ‚Äúwhat happened.‚Äù Avoid ‚Äúif,‚Äù ‚Äúregret,‚Äù and ‚Äúit‚Äôs unfortunate.‚Äù Try ‚ÄúI shouldn‚Äôt have done that,‚Äù ‚ÄúThat was rude of me,‚Äù or ‚ÄúIt was wrong.‚Äù&lt;/p&gt;

  &lt;p&gt;TO THEM ‚Äì Not just to the twitmosphere, but to the person harmed.&lt;/p&gt;

  &lt;p&gt;FOR WHAT YOU DID ‚Äì Be specific. Not ‚Äúhurting you‚Äù but, for example, ‚Äúcalling you a slimy swivel-eyed creep.‚Äù&lt;/p&gt;

  &lt;p&gt;ACKNOWLEDGE THE EFFECT ‚Äì If you know it. ‚ÄúI embarrassed you by calling you a slimy swivel-eyed creep in front of everybody at our dinner table, and at the nearby tables.‚Äù&lt;/p&gt;

  &lt;p&gt;EXPLAIN, BUT DON‚ÄôT EXCUSE ‚Äì ‚ÄúI called you a slimy swivel-eyed creep to try to make you be quiet because I didn‚Äôt want to be thrown out before dessert came. I was a jerk.‚Äù&lt;/p&gt;

  &lt;p&gt;STOP TALKING AND LET THEM HAVE THEIR SAY ‚Äì ‚ÄúI wasn‚Äôt upset that you called me a slimy swivel-eyed creep. I was upset that you interrupted my song. It made me feel like you don‚Äôt respect me as an artist.‚Äù&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;And accountability (giving an account) fits into themes in Sarah Schulman‚Äôs &lt;em&gt;Conflict is Not Abuse&lt;/em&gt;, which I‚Äôll &lt;a href=&quot;https://island94.org/2022/02/it-asks-you-to-be-interactive&quot;&gt;requote&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;‚Ä¶ everyone deserves help when they reach out for it. ‚Ä¶the collapse of Conflict and Abuse is partly the result of a punitive standard in which people are made desperate, yet ineligible, for compassion. ‚Ä¶ people who have suffered in the past, or find themselves implicated in situations in which they are afraid to be accountable, fear that within their group acknowledging some responsibility will mean being denied their need to be heard and cared for.&lt;/p&gt;
&lt;/blockquote&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2022/12/liberatory-accountability&quot;&gt;Liberatory accountability&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Thu, 01 Dec 2022 01:50:00 +0000</pubDate>
  <link>https://island94.org/2022/12/liberatory-accountability</link>
  <guid isPermaLink="true">https://island94.org/2022/12/liberatory-accountability</guid>
  
  
</item>

    
  </channel>
</rss>
